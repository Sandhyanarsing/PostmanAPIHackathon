{
	"info": {
		"_postman_id": "d00a751b-96a8-49d7-bb6f-9f4420c45820",
		"name": "Team21_API_Validators_LMSCollection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33411407",
		"_collection_link": "https://winter-star-673947.postman.co/workspace/Team21_API_Validators~680a6fb3-a729-4c17-873c-11b9ff7964af/collection/33411407-d00a751b-96a8-49d7-bb6f-9f4420c45820?action=share&source=collection_link&creator=33411407"
	},
	"item": [
		{
			"name": "Team21_API_Validators_LoginController",
			"item": [
				{
					"name": "Positive Test Cases",
					"item": [
						{
							"name": "Post user (csv)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resp = pm.response.json();\r",
											"const accessToken = resp.token;\r",
											"pm.collectionVariables.set(\"Token\",accessToken);\r",
											"\r",
											"// Status Line Validation\r",
											"pm.test(\"Status line should contain 'OK'\", function () {\r",
											"    pm.response.to.have.status('OK');\r",
											"});\r",
											"\r",
											"// Status Code Validation\r",
											"pm.test(\"Status code should be 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Response Time Validation\r",
											"pm.test(\"Response time should be less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"// Data Type Validation (Example: JSON)\r",
											"pm.test(\"Content-Type header is application/json\", ()=>{\r",
											"pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"// Data Validation (Example: Check if a specific field exists in the response)\r",
											"pm.test(\"Check if 'roles' exists in the response\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('roles');\r",
											"});\r",
											"\r",
											"//Schema Validation\r",
											"const schema = {\r",
											"\r",
											"    \"$ref\": \"#/definitions/Welcome9\",\r",
											"    \"definitions\": {\r",
											"        \"Welcome9\": {\r",
											"            \"type\": \"object\",\r",
											"            \"additionalProperties\": false,\r",
											"            \"properties\": {\r",
											"                \"token\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"type\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"userId\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"email\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"roles\": {\r",
											"                    \"type\": \"array\",\r",
											"                    \"items\": {\r",
											"                        \"type\": \"string\"\r",
											"                    }\r",
											"                },\r",
											"                \"status\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"email\",\r",
											"                \"roles\",\r",
											"                \"status\",\r",
											"                \"token\",\r",
											"                \"type\",\r",
											"                \"userId\"\r",
											"            ],\r",
											"            \"title\": \"Welcome9\"\r",
											"        }\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response should match the schema\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has chunked encoding\", function () {\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{Password}}\",\r\n  \"userLoginEmailId\": \"{{userLoginEmailId}}\"\r\n\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}{{Endpoint}}",
									"host": [
										"{{BaseUrl}}{{Endpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative Test Cases",
					"item": [
						{
							"name": "User Log in without Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Status Line Validation\r",
											"pm.test(\"Status line should contain 'Not Found'\", function () {\r",
											"    pm.response.to.have.status('Unauthorized');\r",
											"});\r",
											"\r",
											"// Status Code Validation\r",
											"pm.test(\"Status code should be 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Response Time Validation\r",
											"pm.test(\"Response time should be less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"// Data Validation (Example: Check if a specific field exists in the response)\r",
											"pm.test(\"Check if 'error' exists in the response\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"});\r",
											"\r",
											"//Schema Validation\r",
											"const schema = {\r",
											"    \"$ref\": \"#/definitions/Welcome3\",\r",
											"    \"definitions\": {\r",
											"        \"Welcome3\": {\r",
											"            \"type\": \"object\",\r",
											"            \"additionalProperties\": false,\r",
											"            \"properties\": {\r",
											"                \"timestamp\": {\r",
											"                    \"type\": \"string\",\r",
											"                    \"format\": \"date-time\"\r",
											"                },\r",
											"                \"status\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"error\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"path\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"error\",\r",
											"                \"path\",\r",
											"                \"status\",\r",
											"                \"timestamp\"\r",
											"            ],\r",
											"            \"title\": \"Welcome3\"\r",
											"        }\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response should match the schema\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
											"});\r",
											"// Data Type Validation (Example: JSON)\r",
											"pm.test(\"Content-Type header is application/json\", ()=>{\r",
											"pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has chunked encoding\", function () {\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"Numpyninja@1\",\r\n  \"userLoginEmailId\": \"sdetorganizers@gmail.com\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}{{withoutEndPoint}}",
									"host": [
										"{{BaseUrl}}{{withoutEndPoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "User Login with invalid endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Status Line Validation\r",
											"pm.test(\"Status line should contain 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status('Unauthorized');\r",
											"});\r",
											"\r",
											"// Status Code Validation\r",
											"pm.test(\"Status code should be 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Response Time Validation\r",
											"pm.test(\"Response time should be less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"// Data Validation (Example: Check if a specific field exists in the response)\r",
											"pm.test(\"Check if 'error' exists in the response\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"});\r",
											"\r",
											"//Schema Validation\r",
											"const schema = {\r",
											"    \"$ref\": \"#/definitions/Welcome6\",\r",
											"    \"definitions\": {\r",
											"        \"Welcome6\": {\r",
											"            \"type\": \"object\",\r",
											"            \"additionalProperties\": false,\r",
											"            \"properties\": {\r",
											"                \"timestamp\": {\r",
											"                    \"type\": \"string\",\r",
											"                    \"format\": \"date-time\"\r",
											"                },\r",
											"                \"status\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"error\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"path\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"error\",\r",
											"                \"path\",\r",
											"                \"status\",\r",
											"                \"timestamp\"\r",
											"            ],\r",
											"            \"title\": \"Welcome6\"\r",
											"        }\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response should match the schema\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
											"});\r",
											"// Data Type Validation (Example: JSON)\r",
											"pm.test(\"Content-Type header is application/json\", ()=>{\r",
											"pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has chunked encoding\", function () {\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"Numpyninja@1\",\r\n  \"userLoginEmailId\": \"sdetorganizers@gmail.com\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}{{invalidEndPoint}}",
									"host": [
										"{{BaseUrl}}{{invalidEndPoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing Key-Value pair of Password Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Status Line Validation\r",
											"pm.test(\"Status line should contain 'Bad Request'\", function () {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"});\r",
											"\r",
											"// Status Code Validation\r",
											"pm.test(\"Status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"// Response Time Validation\r",
											"pm.test(\"Response time should be less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"// Data Validation (Example: Check if a specific field exists in the response)\r",
											"pm.test(\"Check if 'success' exists in the response\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('success');\r",
											"});\r",
											"\r",
											"//validation Schema\r",
											"const schema = {\r",
											"\"$ref\": \"#/definitions/Welcome7\",\r",
											"    \"definitions\": {\r",
											"        \"Welcome7\": {\r",
											"            \"type\": \"object\",\r",
											"            \"additionalProperties\": false,\r",
											"            \"properties\": {\r",
											"                \"message\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"success\": {\r",
											"                    \"type\": \"boolean\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"message\",\r",
											"                \"success\"\r",
											"            ],\r",
											"            \"title\": \"Welcome7\"\r",
											"        }\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response should match the schema\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
											"});\r",
											"// Data Type Validation (Example: JSON)\r",
											"pm.test(\"Content-Type header is application/json\", ()=>{\r",
											"pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has chunked encoding\", function () {\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \r\n  \"userLoginEmailId\": \"sdetorganizers@gmail.com\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/login",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Empty Email Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Status Line Validation\r",
											"pm.test(\"Status line should contain 'Bad Request'\", function () {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"});\r",
											"\r",
											"// Status Code Validation\r",
											"pm.test(\"Status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"// Response Time Validation\r",
											"pm.test(\"Response time should be less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"// Data Validation (Example: Check if a specific field exists in the response)\r",
											"pm.test(\"Check if 'success' exists in the response\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('success');\r",
											"});\r",
											"\r",
											"//validation Schema\r",
											"const schema = {\r",
											"    \"$ref\": \"#/definitions/Welcome3\",\r",
											"    \"definitions\": {\r",
											"        \"Welcome3\": {\r",
											"            \"type\": \"object\",\r",
											"            \"additionalProperties\": false,\r",
											"            \"properties\": {\r",
											"                \"message\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"success\": {\r",
											"                    \"type\": \"boolean\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"message\",\r",
											"                \"success\"\r",
											"            ],\r",
											"            \"title\": \"Welcome3\"\r",
											"        }\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response should match the schema\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
											"});\r",
											"// Data Type Validation (Example: JSON)\r",
											"pm.test(\"Content-Type header is application/json\", ()=>{\r",
											"pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has chunked encoding\", function () {\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"Numpyninja@1\",\r\n  \"userLoginEmailId\": \"{{emptyEmailBody}}\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/login",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Nonexistent User Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Status Line Validation\r",
											"pm.test(\"Status line should contain 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status('Unauthorized');\r",
											"});\r",
											"\r",
											"// Status Code Validation\r",
											"pm.test(\"Status code should be 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Response Time Validation\r",
											"pm.test(\"Response time should be less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"// Data Validation (Example: Check if a specific field exists in the response)\r",
											"pm.test(\"Check if 'success' exists in the response\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('success');\r",
											"});\r",
											"//validation Schema\r",
											"const schema = {\r",
											"    \"$ref\": \"#/definitions/Welcome9\",\r",
											"    \"definitions\": {\r",
											"        \"Welcome9\": {\r",
											"            \"type\": \"object\",\r",
											"            \"additionalProperties\": false,\r",
											"            \"properties\": {\r",
											"                \"message\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"success\": {\r",
											"                    \"type\": \"boolean\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"message\",\r",
											"                \"success\"\r",
											"            ],\r",
											"            \"title\": \"Welcome9\"\r",
											"        }\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response should match the schema\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
											"});\r",
											"// Data Type Validation (Example: JSON)\r",
											"pm.test(\"Content-Type header is application/json\", ()=>{\r",
											"pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has chunked encoding\", function () {\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"Numpyninja@1\",\r\n  \"userLoginEmailId\": \"{{nonexistentUserEmailId}}\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/login",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Password Format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Status Line Validation\r",
											"pm.test(\"Status line should contain 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status('Unauthorized');\r",
											"});\r",
											"\r",
											"// Status Code Validation\r",
											"pm.test(\"Status code should be 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Response Time Validation\r",
											"pm.test(\"Response time should be less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"// Data Validation (Example: Check if a specific field exists in the response)\r",
											"pm.test(\"Check if 'success' exists in the response\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('success');\r",
											"});\r",
											"//validation Schema\r",
											"const schema = {\r",
											"    \"$ref\": \"#/definitions/Welcome2\",\r",
											"    \"definitions\": {\r",
											"        \"Welcome2\": {\r",
											"            \"type\": \"object\",\r",
											"            \"additionalProperties\": false,\r",
											"            \"properties\": {\r",
											"                \"message\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"success\": {\r",
											"                    \"type\": \"boolean\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"message\",\r",
											"                \"success\"\r",
											"            ],\r",
											"            \"title\": \"Welcome2\"\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Response should match the schema\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
											"});\r",
											"// Data Type Validation (Example: JSON)\r",
											"pm.test(\"Content-Type header is application/json\", ()=>{\r",
											"pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has chunked encoding\", function () {\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{invalidPasswordFormat}}\",\r\n  \"userLoginEmailId\": \"sdetorganizers@gmail.com\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/login",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Empty Password Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Status Line Validation\r",
											"pm.test(\"Status line should contain 'Bad Request'\", function () {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"});\r",
											"\r",
											"// Status Code Validation\r",
											"pm.test(\"Status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"// Response Time Validation\r",
											"pm.test(\"Response time should be less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"// Data Validation (Example: Check if a specific field exists in the response)\r",
											"pm.test(\"Check if 'message' exists in the response\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"$ref\": \"#/definitions/Welcome5\",\r",
											"    \"definitions\": {\r",
											"        \"Welcome5\": {\r",
											"            \"type\": \"object\",\r",
											"            \"additionalProperties\": false,\r",
											"            \"properties\": {\r",
											"                \"message\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"success\": {\r",
											"                    \"type\": \"boolean\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"message\",\r",
											"                \"success\"\r",
											"            ],\r",
											"            \"title\": \"Welcome5\"\r",
											"        }\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response should match the schema\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
											"});\r",
											"// Data Type Validation (Example: JSON)\r",
											"pm.test(\"Content-Type header is application/json\", ()=>{\r",
											"pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has chunked encoding\", function () {\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{emptyPassword}}\",\r\n  \"userLoginEmailId\": \"sdetorganizers@gmail.com\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/login",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing Key-Value pair of UserEmail Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Status Line Validation\r",
											"pm.test(\"Status line should contain 'Bad Request'\", function () {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"});\r",
											"\r",
											"// Status Code Validation\r",
											"pm.test(\"Status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"// Response Time Validation\r",
											"pm.test(\"Response time should be less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"// Data Validation (Example: Check if a specific field exists in the response)\r",
											"pm.test(\"Check if 'message' exists in the response\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"});\r",
											"//validation schema\r",
											"const schema = {\r",
											"    \"$ref\": \"#/definitions/Welcome5\",\r",
											"    \"definitions\": {\r",
											"        \"Welcome5\": {\r",
											"            \"type\": \"object\",\r",
											"            \"additionalProperties\": false,\r",
											"            \"properties\": {\r",
											"                \"message\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"success\": {\r",
											"                    \"type\": \"boolean\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"message\",\r",
											"                \"success\"\r",
											"            ],\r",
											"            \"title\": \"Welcome5\"\r",
											"        }\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response should match the schema\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
											"});\r",
											"// Data Type Validation (Example: JSON)\r",
											"pm.test(\"Content-Type header is application/json\", ()=>{\r",
											"pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has chunked encoding\", function () {\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"Numpyninja@1\"\r\n  \r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/login",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Status Line Validation\r",
											"pm.test(\"Status line should contain 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status('Unauthorized');\r",
											"});\r",
											"\r",
											"// Status Code Validation\r",
											"pm.test(\"Status code should be 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Response Time Validation\r",
											"pm.test(\"Response time should be less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"// Data Validation (Example: Check if a specific field exists in the response)\r",
											"pm.test(\"Check if 'message' exists in the response\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"});\r",
											"//validation schema\r",
											"\r",
											"const schema = {\r",
											"    \"$ref\": \"#/definitions/Welcome2\",\r",
											"    \"definitions\": {\r",
											"        \"Welcome2\": {\r",
											"            \"type\": \"object\",\r",
											"            \"additionalProperties\": false,\r",
											"            \"properties\": {\r",
											"                \"message\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"success\": {\r",
											"                    \"type\": \"boolean\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"message\",\r",
											"                \"success\"\r",
											"            ],\r",
											"            \"title\": \"Welcome2\"\r",
											"        }\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response should match the schema\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
											"});\r",
											"// Data Type Validation (Example: JSON)\r",
											"pm.test(\"Content-Type header is application/json\", ()=>{\r",
											"pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has chunked encoding\", function () {\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"Numpyninja@1\",\r\n  \"userLoginEmailId\": \"{{nonexistentUserEmailId}}\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/login",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "All_Integer Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Status Line Validation\r",
											"pm.test(\"Status line should contain 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status('Unauthorized');\r",
											"});\r",
											"\r",
											"// Status Code Validation\r",
											"pm.test(\"Status code should be 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Response Time Validation\r",
											"pm.test(\"Response time should be less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"// Data Validation (Example: Check if a specific field exists in the response)\r",
											"pm.test(\"Check if 'success' exists in the response\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('success');\r",
											"});\r",
											"//validation schema\r",
											"const schema = {\r",
											"    \"$ref\": \"#/definitions/Welcome5\",\r",
											"    \"definitions\": {\r",
											"        \"Welcome5\": {\r",
											"            \"type\": \"object\",\r",
											"            \"additionalProperties\": false,\r",
											"            \"properties\": {\r",
											"                \"message\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"success\": {\r",
											"                    \"type\": \"boolean\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"message\",\r",
											"                \"success\"\r",
											"            ],\r",
											"            \"title\": \"Welcome5\"\r",
											"        }\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response should match the schema\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
											"});\r",
											"// Data Type Validation (Example: JSON)\r",
											"pm.test(\"Content-Type header is application/json\", ()=>{\r",
											"pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has chunked encoding\", function () {\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{integerPassword}}\",\r\n  \"userLoginEmailId\": \"sdetorganizers@gmail.com\"\r\n\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/login",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Special  charcters instead of Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Status Line Validation\r",
											"pm.test(\"Status line should contain 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status('Unauthorized');\r",
											"});\r",
											"\r",
											"// Status Code Validation\r",
											"pm.test(\"Status code should be 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Response Time Validation\r",
											"pm.test(\"Response time should be less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"// Data Validation (Example: Check if a specific field exists in the response)\r",
											"pm.test(\"Check if 'success' exists in the response\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('success');\r",
											"});\r",
											"\r",
											"//validation schema\r",
											"const schema ={\r",
											"    \"$ref\": \"#/definitions/Welcome2\",\r",
											"    \"definitions\": {\r",
											"        \"Welcome2\": {\r",
											"            \"type\": \"object\",\r",
											"            \"additionalProperties\": false,\r",
											"            \"properties\": {\r",
											"                \"message\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"success\": {\r",
											"                    \"type\": \"boolean\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"message\",\r",
											"                \"success\"\r",
											"            ],\r",
											"            \"title\": \"Welcome2\"\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Response should match the schema\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
											"});\r",
											"// Data Type Validation (Example: JSON)\r",
											"pm.test(\"Content-Type header is application/json\", ()=>{\r",
											"pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has chunked encoding\", function () {\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{specCharPW}}\",\r\n  \"userLoginEmailId\": \"sdetorganizers@gmail.com\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/login",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "All_Integer UserLoginEmailID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Status Line Validation\r",
											"pm.test(\"Status line should contain 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status('Unauthorized');\r",
											"});\r",
											"\r",
											"// Status Code Validation\r",
											"pm.test(\"Status code should be 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Response Time Validation\r",
											"pm.test(\"Response time should be less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"// Data Validation (Example: Check if a specific field exists in the response)\r",
											"pm.test(\"Check if 'success' exists in the response\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('success');\r",
											"});\r",
											"\r",
											"//validation schema\r",
											"const schema = {\r",
											"    \"$ref\": \"#/definitions/Welcome8\",\r",
											"    \"definitions\": {\r",
											"        \"Welcome8\": {\r",
											"            \"type\": \"object\",\r",
											"            \"additionalProperties\": false,\r",
											"            \"properties\": {\r",
											"                \"message\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"success\": {\r",
											"                    \"type\": \"boolean\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"message\",\r",
											"                \"success\"\r",
											"            ],\r",
											"            \"title\": \"Welcome8\"\r",
											"        }\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response should match the schema\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
											"});\r",
											"// Data Type Validation (Example: JSON)\r",
											"pm.test(\"Content-Type header is application/json\", ()=>{\r",
											"pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has chunked encoding\", function () {\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"Numpyninja@1\",\r\n  \"userLoginEmailId\": \"integerEmailID\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/login",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Special characters instead of UserLoginEmailID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Status Line Validation\r",
											"pm.test(\"Status line should contain 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status('Unauthorized');\r",
											"});\r",
											"\r",
											"// Status Code Validation\r",
											"pm.test(\"Status code should be 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Response Time Validation\r",
											"pm.test(\"Response time should be less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"// Data Validation (Example: Check if a specific field exists in the response)\r",
											"pm.test(\"Check if 'success' exists in the response\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('success');\r",
											"});\r",
											"\r",
											"//validation schema\r",
											"const schema = {\r",
											"    \"$ref\": \"#/definitions/Welcome4\",\r",
											"    \"definitions\": {\r",
											"        \"Welcome4\": {\r",
											"            \"type\": \"object\",\r",
											"            \"additionalProperties\": false,\r",
											"            \"properties\": {\r",
											"                \"message\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"success\": {\r",
											"                    \"type\": \"boolean\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"message\",\r",
											"                \"success\"\r",
											"            ],\r",
											"            \"title\": \"Welcome4\"\r",
											"        }\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response should match the schema\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
											"});\r",
											"// Data Type Validation (Example: JSON)\r",
											"pm.test(\"Content-Type header is application/json\", ()=>{\r",
											"pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has chunked encoding\", function () {\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"Numpyninja@1\",\r\n  \"userLoginEmailId\": \"{{specCharEmailID}}\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/login",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Empty Password and empty UserLoginEmailID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Status Line Validation\r",
											"pm.test(\"Status line should contain 'Bad Request'\", function () {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"});\r",
											"\r",
											"// Status Code Validation\r",
											"pm.test(\"Status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"// Response Time Validation\r",
											"pm.test(\"Response time should be less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"// Data Validation (Example: Check if a specific field exists in the response)\r",
											"pm.test(\"Check if 'success' exists in the response\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('success');\r",
											"});\r",
											"\r",
											"//validation schema\r",
											"const schema = {\r",
											"    \"$ref\": \"#/definitions/Welcome5\",\r",
											"    \"definitions\": {\r",
											"        \"Welcome5\": {\r",
											"            \"type\": \"object\",\r",
											"            \"additionalProperties\": false,\r",
											"            \"properties\": {\r",
											"                \"message\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"success\": {\r",
											"                    \"type\": \"boolean\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"message\",\r",
											"                \"success\"\r",
											"            ],\r",
											"            \"title\": \"Welcome5\"\r",
											"        }\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response should match the schema\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
											"});\r",
											"// Data Type Validation (Example: JSON)\r",
											"pm.test(\"Content-Type header is application/json\", ()=>{\r",
											"pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has chunked encoding\", function () {\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{emptyPassword}}\",\r\n  \"userLoginEmailId\": \"{{emptyEmailBody}}\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/login",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Case Sensitive Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Status Line Validation\r",
											"pm.test(\"Status line should contain 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status('Unauthorized');\r",
											"});\r",
											"\r",
											"// Status Code Validation\r",
											"pm.test(\"Status code should be 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Response Time Validation\r",
											"pm.test(\"Response time should be less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"// Data Validation (Example: Check if a specific field exists in the response)\r",
											"pm.test(\"Check if 'success' exists in the response\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('success');\r",
											"});\r",
											"\r",
											"//validation schema\r",
											"const schema = {\r",
											"    \"$ref\": \"#/definitions/Welcome10\",\r",
											"    \"definitions\": {\r",
											"        \"Welcome10\": {\r",
											"            \"type\": \"object\",\r",
											"            \"additionalProperties\": false,\r",
											"            \"properties\": {\r",
											"                \"message\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"success\": {\r",
											"                    \"type\": \"boolean\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"message\",\r",
											"                \"success\"\r",
											"            ],\r",
											"            \"title\": \"Welcome10\"\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Response should match the schema\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
											"});\r",
											"// Data Type Validation (Example: JSON)\r",
											"pm.test(\"Content-Type header is application/json\", ()=>{\r",
											"pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has chunked encoding\", function () {\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{caseSensitivePW}}\",\r\n  \"userLoginEmailId\": \"sdetorganizers@gmail.com\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/login",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Leading and Trailing  Spaces in EmailID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Status Line Validation\r",
											"pm.test(\"Status line should contain 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status('Unauthorized');\r",
											"});\r",
											"\r",
											"// Status Code Validation\r",
											"pm.test(\"Status code should be 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Response Time Validation\r",
											"pm.test(\"Response time should be less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"// Data Validation (Example: Check if a specific field exists in the response)\r",
											"pm.test(\"Check if 'message' exists in the response\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"});\r",
											"\r",
											"//validation schema\r",
											"\r",
											"const schema = {\r",
											"    \"$ref\": \"#/definitions/Welcome8\",\r",
											"    \"definitions\": {\r",
											"        \"Welcome8\": {\r",
											"            \"type\": \"object\",\r",
											"            \"additionalProperties\": false,\r",
											"            \"properties\": {\r",
											"                \"message\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"success\": {\r",
											"                    \"type\": \"boolean\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"message\",\r",
											"                \"success\"\r",
											"            ],\r",
											"            \"title\": \"Welcome8\"\r",
											"        }\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response should match the schema\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
											"});\r",
											"// Data Type Validation (Example: JSON)\r",
											"pm.test(\"Content-Type header is application/json\", ()=>{\r",
											"pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has chunked encoding\", function () {\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"Numpyninja@1\",\r\n  \"userLoginEmailId\": \"{{spacesinEmailID}}\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/login",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Team21_API_Validators_Program",
			"item": [
				{
					"name": "Positive Test Cases",
					"item": [
						{
							"name": "Create New Program",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var momentvar = require('moment');\r",
											"var currdate = momentvar().format('MMMDD');\r",
											"var sno = pm.variables.replaceIn('{{$randomInt}}');\r",
											"\r",
											"var programName = currdate + '-'+ 'API_Validators' +'-'+ 'SDET' +'-' + sno;\r",
											"\r",
											"pm.collectionVariables.set('programName_cl',programName);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.collectionVariables.set(\"programId_cl\",jsonData.programId);\r",
											"\r",
											"//Check the Status Code\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//Check the Status Code Text\r",
											"pm.test(\"Status code name has string\", () => {\r",
											"  pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//Check the response header is present\r",
											"pm.test(\"Content-Type header is present\", () => {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//Check the Content-Type response header is application/json\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//Validating Response is not NULL\r",
											"pm.test('Validating Response is not NULL', function () {\r",
											"pm.expect(jsonData).to.not.equal(null);})\r",
											"\r",
											"//Check the data type of the response\r",
											"pm.test(\"Test data type of the response\", () => {\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.programId).to.be.a(\"number\");\r",
											"  pm.expect(jsonData.programName).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.programStatus).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.programDescription).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.creationTime).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.lastModTime).to.be.a(\"string\");\r",
											"});\r",
											"//Define the JSON schema that you want to validate\r",
											"var schema = {\r",
											"    \"$ref\": \"#/definitions/Welcome3\",\r",
											"    \"definitions\": {\r",
											"        \"Welcome3\": {\r",
											"            \"type\": \"object\",\r",
											"            \"additionalProperties\": false,\r",
											"            \"properties\": {\r",
											"                \"programId\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"programName\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"programDescription\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"programStatus\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"creationTime\": {\r",
											"                    \"type\": \"string\",\r",
											"                    \"format\": \"date-time\"\r",
											"                },\r",
											"                \"lastModTime\": {\r",
											"                    \"type\": \"string\",\r",
											"                    \"format\": \"date-time\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"creationTime\",\r",
											"                \"lastModTime\",\r",
											"                \"programDescription\",\r",
											"                \"programId\",\r",
											"                \"programName\",\r",
											"                \"programStatus\"\r",
											"            ],\r",
											"            \"title\": \"Welcome3\"\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"//Validate the response body\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (schema);\r",
											"  pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programName\": \"{{programName_cl}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/saveprogram",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"saveprogram"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Programs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Check the Status Code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Check the Status Code Text\r",
											"pm.test(\"Status code name has string\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//Check the response header is present\r",
											"pm.test(\"Content-Type header is present\", () => {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//Check the Content-Type response header is application/json\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//Check the data type of the response\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"//Validating Response is not NULL\r",
											"pm.test('Validating Response is not NULL', function () {\r",
											"pm.expect(jsonData).to.not.equal(null);})\r",
											"\r",
											"//Define the JSON schema that you want to validate\r",
											"var schema = {\r",
											"    \"type\": \"array\",\r",
											"    \"items\": {\r",
											"        \"$ref\": \"#/definitions/Welcome1Element\"\r",
											"    },\r",
											"    \"definitions\": {\r",
											"        \"Welcome1Element\": {\r",
											"            \"type\": \"object\",\r",
											"            \"additionalProperties\": false,\r",
											"            \"properties\": {\r",
											"                \"programId\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"programName\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"programDescription\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"programStatus\": {\r",
											"                    \"$ref\": \"#/definitions/ProgramStatus\"\r",
											"                },\r",
											"                \"creationTime\": {\r",
											"                    \"type\": \"string\",\r",
											"                    \"format\": \"date-time\"\r",
											"                },\r",
											"                \"lastModTime\": {\r",
											"                    \"type\": \"string\",\r",
											"                    \"format\": \"date-time\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"creationTime\",\r",
											"                \"lastModTime\",\r",
											"                \"programDescription\",\r",
											"                \"programId\",\r",
											"                \"programName\",\r",
											"                \"programStatus\"\r",
											"            ],\r",
											"            \"title\": \"Welcome1Element\"\r",
											"        },\r",
											"        \"ProgramStatus\": {\r",
											"            \"type\": \"string\",\r",
											"            \"enum\": [\r",
											"                \"Active\",\r",
											"                \"Inactive\",\r",
											"                \"active\",\r",
											"                \"InActive\",\r",
											"                \"INActive\",\r",
											"                \"ACTIVE\",\r",
											"                \"inactive\",\r",
											"                \"INACTIVE\"\r",
											"            ],\r",
											"            \"title\": \"ProgramStatus\"\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"//Validate the response body\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (schema);\r",
											"  pm.expect(pm.response.json()).to.be.an('array');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/allPrograms",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"allPrograms"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Programs with Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Check the Status Code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Check the Status Code Text\r",
											"pm.test(\"Status code name has string\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//Check the response header is present\r",
											"pm.test(\"Content-Type header is present\", () => {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//Check the Content-Type response header is application/json\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//Check the data type of the response\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"//Validating Response is not NULL\r",
											"pm.test('Validating Response is not NULL', function () {\r",
											"pm.expect(jsonData).to.not.equal(null);})\r",
											"\r",
											"//Define the JSON schema that you want to validate\r",
											"var schema = {\r",
											"    \"type\": \"array\",\r",
											"    \"items\": {\r",
											"        \"$ref\": \"#/definitions/Welcome3Element\"\r",
											"    },\r",
											"    \"definitions\": {\r",
											"        \"Welcome3Element\": {\r",
											"            \"type\": \"object\",\r",
											"            \"additionalProperties\": false,\r",
											"            \"properties\": {\r",
											"                \"programId\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"programName\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"programDescription\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"programStatus\": {\r",
											"                    \"$ref\": \"#/definitions/ProgramStatus\"\r",
											"                },\r",
											"                \"programUsers\": {\r",
											"                    \"type\": \"array\",\r",
											"                    \"items\": {\r",
											"                        \"$ref\": \"#/definitions/ProgramUser\"\r",
											"                    }\r",
											"                },\r",
											"                \"creationTime\": {\r",
											"                    \"type\": \"string\",\r",
											"                    \"format\": \"date-time\"\r",
											"                },\r",
											"                \"lastModTime\": {\r",
											"                    \"type\": \"string\",\r",
											"                    \"format\": \"date-time\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"creationTime\",\r",
											"                \"lastModTime\",\r",
											"                \"programDescription\",\r",
											"                \"programId\",\r",
											"                \"programName\",\r",
											"                \"programStatus\",\r",
											"                \"programUsers\"\r",
											"            ],\r",
											"            \"title\": \"Welcome3Element\"\r",
											"        },\r",
											"        \"ProgramUser\": {\r",
											"            \"type\": \"object\",\r",
											"            \"additionalProperties\": false,\r",
											"            \"properties\": {\r",
											"                \"userId\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"userFirstName\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"userLastName\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"userMiddleName\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"userPhoneNumber\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"userLocation\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"userTimeZone\": {\r",
											"                    \"$ref\": \"#/definitions/UserTimeZone\"\r",
											"                },\r",
											"                \"userLinkedinUrl\": {\r",
											"                    \"type\": \"string\",\r",
											"                    \"qt-uri-protocols\": [\r",
											"                        \"http\",\r",
											"                        \"https\"\r",
											"                    ]\r",
											"                },\r",
											"                \"userEduUg\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"userEduPg\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"userComments\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"userVisaStatus\": {\r",
											"                    \"$ref\": \"#/definitions/UserVisaStatus\"\r",
											"                },\r",
											"                \"userLoginEmail\": {\r",
											"                    \"type\": \"null\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"userEduPg\",\r",
											"                \"userEduUg\",\r",
											"                \"userFirstName\",\r",
											"                \"userId\",\r",
											"                \"userLastName\",\r",
											"                \"userLinkedinUrl\",\r",
											"                \"userLocation\",\r",
											"                \"userLoginEmail\",\r",
											"                \"userPhoneNumber\",\r",
											"                \"userTimeZone\",\r",
											"                \"userVisaStatus\"\r",
											"            ],\r",
											"            \"title\": \"ProgramUser\"\r",
											"        },\r",
											"        \"ProgramStatus\": {\r",
											"            \"type\": \"string\",\r",
											"            \"enum\": [\r",
											"                \"Inactive\",\r",
											"                \"active\",\r",
											"                \"Active\",\r",
											"                \"ACTIVE\"\r",
											"            ],\r",
											"            \"title\": \"ProgramStatus\"\r",
											"        },\r",
											"        \"UserTimeZone\": {\r",
											"            \"type\": \"string\",\r",
											"            \"enum\": [\r",
											"                \"PST\",\r",
											"                \"IST\",\r",
											"                \"EST\",\r",
											"                \"MST\",\r",
											"                \"CST\"\r",
											"            ],\r",
											"            \"title\": \"UserTimeZone\"\r",
											"        },\r",
											"        \"UserVisaStatus\": {\r",
											"            \"type\": \"string\",\r",
											"            \"enum\": [\r",
											"                \"US-Citizen\",\r",
											"                \"H1B\",\r",
											"                \"H4\",\r",
											"                \"NA\",\r",
											"                \"H4-EAD\",\r",
											"                \"Not-Specified\",\r",
											"                \"GC-EAD\",\r",
											"                \"Canada-Citizen\"\r",
											"            ],\r",
											"            \"title\": \"UserVisaStatus\"\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//Validate the response body\r",
											"/*pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (schema);\r",
											"  pm.expect(pm.response.json()).to.be.an('array');\r",
											"});*/\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/allProgramsWithUsers",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"allProgramsWithUsers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Program by Program Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Check the Status Code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Check the Status Code Text\r",
											"pm.test(\"Status code name has string\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//Check the response header is present\r",
											"pm.test(\"Content-Type header is present\", () => {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//Check the Content-Type response header is application/json\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//Check the data type of the response\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"//Validating Response is not NULL\r",
											"pm.test('Validating Response is not NULL', function () {\r",
											"pm.expect(jsonData).to.not.equal(null);})\r",
											"\r",
											"pm.test(\"Test data type of the response\", () => {\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.programId).to.be.a(\"number\");\r",
											"  pm.expect(jsonData.programName).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.programStatus).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.programDescription).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.creationTime).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.lastModTime).to.be.a(\"string\");\r",
											"});\r",
											"//Define the JSON schema that you want to validate\r",
											"var schema = {\r",
											"    \"$ref\": \"#/definitions/Welcome1\",\r",
											"    \"definitions\": {\r",
											"        \"Welcome1\": {\r",
											"            \"type\": \"object\",\r",
											"            \"additionalProperties\": false,\r",
											"            \"properties\": {\r",
											"                \"programId\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"programName\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"programDescription\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"programStatus\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"creationTime\": {\r",
											"                    \"type\": \"string\",\r",
											"                    \"format\": \"date-time\"\r",
											"                },\r",
											"                \"lastModTime\": {\r",
											"                    \"type\": \"string\",\r",
											"                    \"format\": \"date-time\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"creationTime\",\r",
											"                \"lastModTime\",\r",
											"                \"programDescription\",\r",
											"                \"programId\",\r",
											"                \"programName\",\r",
											"                \"programStatus\"\r",
											"            ],\r",
											"            \"title\": \"Welcome1\"\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//Validate the response body\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (schema);\r",
											"  pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/programs/{{programId_cl}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"programs",
										"{{programId_cl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Program by Program Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonoutput = pm.response.json();\r",
											"\r",
											"pm.collectionVariables.set('programName_cl',jsonoutput.programName);\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Check the Status Code Text\r",
											"pm.test(\"Status code name has string\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//Check the response header is present\r",
											"pm.test(\"Content-Type header is present\", () => {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//Check the Content-Type response header is application/json\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//Check the data type of the response\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"//Check the data type of the response\r",
											"pm.test(\"Test data type of the response\", () => {\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.programId).to.be.a(\"number\");\r",
											"  pm.expect(jsonData.programName).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.programStatus).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.programDescription).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.creationTime).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.lastModTime).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"//Define the JSON schema that you want to validate\r",
											"var schema = {\r",
											"    \"$ref\": \"#/definitions/Welcome5\",\r",
											"    \"definitions\": {\r",
											"        \"Welcome5\": {\r",
											"            \"type\": \"object\",\r",
											"            \"additionalProperties\": false,\r",
											"            \"properties\": {\r",
											"                \"programId\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"programName\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"programDescription\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"programStatus\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"creationTime\": {\r",
											"                    \"type\": \"string\",\r",
											"                    \"format\": \"date-time\"\r",
											"                },\r",
											"                \"lastModTime\": {\r",
											"                    \"type\": \"string\",\r",
											"                    \"format\": \"date-time\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"creationTime\",\r",
											"                \"lastModTime\",\r",
											"                \"programDescription\",\r",
											"                \"programId\",\r",
											"                \"programName\",\r",
											"                \"programStatus\"\r",
											"            ],\r",
											"            \"title\": \"Welcome5\"\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//Validate the response body\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (schema);\r",
											"  pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"{{programDescription}}\",\r\n   \"programName\": \"{{programName_cl}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/putprogram/{{programId_cl}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"putprogram",
										"{{programId_cl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Program by Program Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonoutput = pm.response.json();\r",
											"\r",
											"pm.collectionVariables.set('programName_cl',jsonoutput.programName);\r",
											"\r",
											"\r",
											"//Check the Status Code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Check the Status Code Text\r",
											"pm.test(\"Status code name has string\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//Check the response header is present\r",
											"pm.test(\"Content-Type header is present\", () => {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//Check the Content-Type response header is application/json\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//Check the data type of the response\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"//Check the data type of the response\r",
											"pm.test(\"Test data type of the response\", () => {\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.programId).to.be.a(\"number\");\r",
											"  pm.expect(jsonData.programName).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.programStatus).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.programDescription).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.creationTime).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.lastModTime).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"//Define the JSON schema that you want to validate\r",
											"var schema = {\r",
											"    \"$ref\": \"#/definitions/Welcome5\",\r",
											"    \"definitions\": {\r",
											"        \"Welcome5\": {\r",
											"            \"type\": \"object\",\r",
											"            \"additionalProperties\": false,\r",
											"            \"properties\": {\r",
											"                \"programId\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"programName\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"programDescription\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"programStatus\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"creationTime\": {\r",
											"                    \"type\": \"string\",\r",
											"                    \"format\": \"date-time\"\r",
											"                },\r",
											"                \"lastModTime\": {\r",
											"                    \"type\": \"string\",\r",
											"                    \"format\": \"date-time\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"creationTime\",\r",
											"                \"lastModTime\",\r",
											"                \"programDescription\",\r",
											"                \"programId\",\r",
											"                \"programName\",\r",
											"                \"programStatus\"\r",
											"            ],\r",
											"            \"title\": \"Welcome5\"\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//Validate the response body\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (schema);\r",
											"  pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programName\": \"{{programName_cl}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/program/{{programName_cl}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"program",
										"{{programName_cl}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative Test Cases",
					"item": [
						{
							"name": "Create Program already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Message field value validation\", function () {\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"ProgramDescription\",\r\n  \"programName\": \"{{programName_cl}}\",\r\n  \"programStatus\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/saveprogram",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"saveprogram"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Program with NULL Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Message field value validation\", function () {\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var momentvar = require('moment');\r",
											"var currdate = momentvar().format('MMMDD');\r",
											"var sno = pm.variables.replaceIn('{{$randomInt}}');\r",
											"\r",
											"var programName = currdate + '-'+ 'API_Validators' +'-'+ 'SDET' +'-' + sno;\r",
											"\r",
											"pm.collectionVariables.set('programName_cl',programName);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"ProgramDesc\",\r\n  \"programName\": \"{{programName_cl\",\r\n  \"programStatus\": \"NULL\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/saveprogram",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"saveprogram"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Program for Invalid Program Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Message field value validation\", function () {\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/programs/12345",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"programs",
										"12345"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Program by Invalid Program Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Message field value validation\", function () {\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"UpdatedDescription\",\r\n   \"programName\": \"{{programName_cl}}\",\r\n  \"programStatus\": \"active\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/putprogram/12345",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"putprogram",
										"12345"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Program by Program Id with missing field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Message field value validation\", function () {\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"UpdatedProgrambyProgramIdwithmissingfield\",\r\n   \"programName\": \"\",\r\n  \"programStatus\": \"active\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/putprogram/{{programId_cl}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"putprogram",
										"{{programId_cl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Program by Invalid Program Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Message field value validation\", function () {\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"UpdatedDescription\",\r\n   \"programName\": \"{{programName_cl}}\",\r\n  \"programStatus\": \"active\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/program/sampleproject",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"program",
										"sampleproject"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Program by Program Name with missing field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Message field value validation\", function () {\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"UpdateProgrambyProgramNamewithmissingfield\",\r\n  \"programName\": \"\",\r\n  \"programStatus\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/program/{{programName_cl}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"program",
										"{{programName_cl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Program by Invalid Program Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Message field value validation\", function () {\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/deletebyprogid/123456",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"deletebyprogid",
										"123456"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Program by Program Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Message field value validation\", function () {\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/deletebyprogname/program123",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"deletebyprogname",
										"program123"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Team21_API_Validators_Program Batch",
			"item": [
				{
					"name": "Positive Test Cases",
					"item": [
						{
							"name": "Create New Batch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(pm.collectionVariables.get(\"CurrentMonthDate_cl\"));",
											"",
											"",
											"const jsonData = pm.response.json();",
											"console.log(jsonData);",
											"",
											"//set environment variable",
											"pm.collectionVariables.set(\"batchId_cl\",jsonData.batchId);",
											"pm.collectionVariables.set(\"batchName_cl\",jsonData.batchName);",
											"pm.collectionVariables.set(\"batchStatus_cl\",jsonData.batchStatus);",
											"pm.environment.set(\"batchId_env\",jsonData.batchId);",
											"pm.environment.set(\"batchName_env\",jsonData.batchName);",
											"pm.environment.set(\"programId_env\",jsonData.programId);",
											"pm.environment.set(\"programName_env\",jsonData.programName);",
											"",
											"const expectedSchema = ",
											"{",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"batchDescription\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"batchId\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"batchName\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"batchNoOfClasses\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"batchStatus\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"programId\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"programName\": {",
											"      \"type\": \"string\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"batchDescription\",",
											"    \"batchId\",",
											"    \"batchName\",",
											"    \"batchNoOfClasses\",",
											"    \"batchStatus\",",
											"    \"programId\",",
											"    \"programName\"",
											"  ]",
											"}",
											"",
											"pm.test('Status code is 201', function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test('Validating JSON Schema using tv4', function () {",
											"pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"});",
											"pm.test('Validating JSON Schema using AJV',  ()=> {",
											"    pm.response.to.have.jsonSchema(expectedSchema);",
											"});",
											"",
											"pm.test('Validating Response is not NULL', function () {",
											"pm.expect(jsonData).to.not.equal(null);})",
											"",
											"pm.test('Status Code name has String,Created', () => {",
											"pm.response.to.have.status(\"Created\");})",
											"",
											"pm.test('Response time is less than 1000ms',() =>{",
											"pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											"",
											"pm.test(\"Test Data Type Of the Response\", () => {",
											"    pm.expect(jsonData).to.be.an(\"object\");",
											"    pm.expect(jsonData.batchDescription).to.be.a(\"string\");",
											"    pm.expect(jsonData.batchId).to.be.a(\"number\");",
											"    pm.expect(jsonData.batchName).to.be.a(\"string\");",
											"   pm.expect(jsonData.batchNoOfClasses).to.be.a(\"number\");",
											"   pm.expect(jsonData.batchStatus).to.be.a(\"string\");",
											"   pm.expect(jsonData.programId).to.be.a(\"number\");",
											"   pm.expect(jsonData.programName).to.be.a(\"string\");",
											"});",
											"",
											"pm.test (\"check batchId present in the response body\",()=> {",
											" //   var jsonData = pm.response.json();",
											"    pm.expect(jsonData.batchId).to.eql(pm.environment.get(\"batchId_env\"))",
											"})",
											"",
											"if(pm.response.code == 201 && jsonData.batchId != 0)",
											"    postman.setNextRequest(\"GET All Batches\");",
											"else",
											"    postman.setNextRequest(null);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');",
											"var CurrentMonthDate = moment().format(\"MMMDD\");",
											"var serialNo = pm.variables.replaceIn('{{$randomInt}}');",
											"pm.collectionVariables.set('CurrentMonthDate_cl',moment().format(\"MMMDD\"));",
											"pm.collectionVariables.set(\"serialNo_cl\",serialNo);",
											"//pm.environment.get(\"(programName_env\")",
											"//var batchName = CurrentMonthDate + '-'+ pm.collectionVariables.get(\"TeamName_cl\") +'-'+ 'SDET' +'-'+  'SDET136' +'-' + pm.variables.replaceIn('{{$randomInt}}');",
											"",
											"// console.log(batchName);",
											"// pm.collectionVariables.set('batchName_cl',batchName);",
											"// console.log(pm.collectionVariables.get(\"batchName_cl\"));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"batchDescription\": \"{{batchDescription}}\",\n  \"batchId\": 0,\n  \"batchName\": \"{{batchName}}\",\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\n  \"batchStatus\": \"{{batchStatus}}\",\n  \"programId\": {{batchProgramId}},\n  \"programName\": \"{{batchProgramName}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/batches",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET All Batches",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"console.log(jsonData);",
											"",
											"const expectedSchema = {",
											"  \"type\": \"array\",",
											"  \"items\": [",
											"    {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"batchDescription\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"batchId\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"batchName\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"batchNoOfClasses\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"batchStatus\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"programId\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"programName\": {",
											"          \"type\": \"string\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"batchDescription\",",
											"        \"batchId\",",
											"        \"batchName\",",
											"        \"batchNoOfClasses\",",
											"        \"batchStatus\",",
											"        \"programId\",",
											"        \"programName\"",
											"      ]",
											"    }",
											"  ]",
											"}",
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test('Validating Response is not NULL', function () {",
											"pm.expect(jsonData).to.not.equal(null);})",
											"",
											"pm.test('Status String is OK', () => {",
											"pm.response.to.have.status(\"OK\");})",
											"",
											"pm.test('Response time is less than 1000ms',() =>{",
											"pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											"pm.test('Validating JSON Schema using tv4', () => {",
											" //   const response = pm.response.json();",
											"pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"});",
											"pm.test('Validating JSON Schema using AJV',  ()=> {",
											"    pm.response.to.have.jsonSchema(expectedSchema);",
											"});",
											"",
											"",
											"// jsonData.forEach(object => {",
											"//     pm.test(`Test Data Type of  response id ${object.batchId}`, () => {",
											"//     pm.expect(object.batchName).to.be.a(\"string\");",
											"//      pm.expect(object.batchNoOfClasses).to.be.a(\"number\");",
											"//      pm.expect(object.batchDescription).to.be.a(\"string\");",
											"//    });",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/batches",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Batch details by Valid Batch Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"console.log(jsonData);",
											"",
											"const expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"batchId\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"batchName\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"batchDescription\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"batchStatus\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"batchNoOfClasses\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"programId\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"programName\": {",
											"      \"type\": \"string\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"batchId\",",
											"    \"batchName\",",
											"    \"batchDescription\",",
											"    \"batchStatus\",",
											"    \"batchNoOfClasses\",",
											"    \"programId\",",
											"    \"programName\"",
											"  ]",
											"}",
											"",
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test('Validating Response is not NULL', function () {",
											"pm.expect(jsonData).to.not.equal(null);})",
											"",
											"pm.test('Status String is OK', () => {",
											"pm.response.to.have.status(\"OK\");})",
											"",
											"pm.test('Response time is less than 1000ms',() =>{",
											"pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											"pm.test(\"Test Data Type Of the Response\", () => {",
											"    pm.expect(jsonData).to.be.an(\"object\");",
											"    pm.expect(jsonData.batchName).to.be.a(\"string\");",
											"    pm.expect(jsonData.batchId).to.be.a(\"number\");",
											"    pm.expect(jsonData.batchDescription).to.be.a(\"string\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/batches/batchId/{{batchId_cl}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches",
										"batchId",
										"{{batchId_cl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Batch Details by Valid BatchName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"console.log(jsonData);",
											"",
											"const expectedSchema = {",
											"  \"type\": \"array\",",
											"  \"items\": [",
											"    {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"batchDescription\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"batchId\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"batchName\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"batchNoOfClasses\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"batchStatus\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"programId\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"programName\": {",
											"          \"type\": \"string\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"batchDescription\",",
											"        \"batchId\",",
											"        \"batchName\",",
											"        \"batchNoOfClasses\",",
											"        \"batchStatus\",",
											"        \"programId\",",
											"        \"programName\"",
											"      ]",
											"    }",
											"  ]",
											"}",
											"",
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test('Validating Response is not NULL', function () {",
											"pm.expect(jsonData).to.not.equal(null);})",
											"",
											"pm.test('Status String is OK', () => {",
											"pm.response.to.have.status(\"OK\");})",
											"",
											"pm.test('Response time is less than 1000ms',() =>{",
											"pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											"pm.test('Validating JSON Schema using tv4', () => {",
											" //   const response = pm.response.json();",
											"pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"});",
											"pm.test('Validating JSON Schema using AJV',  ()=> {",
											"    pm.response.to.have.jsonSchema(expectedSchema);",
											"});",
											"// jsonData.forEach(object => {",
											"//     pm.test(`Test Data Type of  response id ${object.batchId}`, () => {",
											"//     pm.expect(object.batchName).to.be.a(\"string\");",
											"//      pm.expect(object.batchNoOfClasses).to.be.a(\"number\");",
											"//      pm.expect(object.batchDescription).to.be.a(\"string\");",
											"//    });",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/batches/batchName/{{batchName_cl}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches",
										"batchName",
										"{{batchName_cl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Batch Details by Valid ProgramId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"console.log(jsonData);",
											"",
											"const expectedSchema = {",
											"  \"type\": \"array\",",
											"  \"items\": [",
											"    {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"batchDescription\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"batchId\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"batchName\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"batchNoOfClasses\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"batchStatus\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"programId\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"programName\": {",
											"          \"type\": \"string\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"batchDescription\",",
											"        \"batchId\",",
											"        \"batchName\",",
											"        \"batchNoOfClasses\",",
											"        \"batchStatus\",",
											"        \"programId\",",
											"        \"programName\"",
											"      ]",
											"    }",
											"  ]",
											"}",
											"",
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test('Validating Response is not NULL', function () {",
											"pm.expect(jsonData).to.not.equal(null);})",
											"",
											"pm.test('Status String is OK', () => {",
											"pm.response.to.have.status(\"OK\");})",
											"",
											"pm.test('Response time is less than 1000ms',() =>{",
											"pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											"pm.test('Validating JSON Schema using tv4', () => {",
											" //   const response = pm.response.json();",
											"pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"});",
											"pm.test('Validating JSON Schema using AJV',  ()=> {",
											"    pm.response.to.have.jsonSchema(expectedSchema);",
											"});",
											"// pm.test(\"Test Data Type Of the Response\", () => {",
											"//     pm.expect(jsonData).to.be.an(\"object\");",
											"//     pm.expect(jsonData.batchName).to.be.a(\"string\");",
											"//     pm.expect(jsonData.batchId).to.be.a(\"number\");",
											"//      pm.expect(jsonData.programId).to.be.a(\"number\");",
											"//     pm.expect(jsonData.batchDescription).to.be.a(\"string\");",
											"// });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/batches/program/{{programId_cl}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches",
										"program",
										"{{programId_cl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Batch by Valid Batch Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"console.log(jsonData);",
											"",
											"const expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"batchId\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"batchName\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"batchDescription\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"batchStatus\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"batchNoOfClasses\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"programId\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"programName\": {",
											"      \"type\": \"string\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"batchId\",",
											"    \"batchName\",",
											"    \"batchDescription\",",
											"    \"batchStatus\",",
											"    \"batchNoOfClasses\",",
											"    \"programId\",",
											"    \"programName\"",
											"  ]",
											"}",
											"",
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test('Validating Response is not NULL', function () {",
											"pm.expect(jsonData).to.not.equal(null);})",
											"",
											"pm.test('Status String is OK', () => {",
											"pm.response.to.have.status(\"OK\");})",
											"",
											"pm.test('Response time is less than 1000ms',() =>{",
											"pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											"pm.test('Validating JSON Schema using tv4', () => {",
											" //   const response = pm.response.json();",
											"pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"});",
											"pm.test('Validating JSON Schema using AJV',  ()=> {",
											"    pm.response.to.have.jsonSchema(expectedSchema);",
											"});",
											"pm.test(\"Test Data Type Of the Response\", () => {",
											"    pm.expect(jsonData).to.be.an(\"object\");",
											"    pm.expect(jsonData.batchDescription).to.be.a(\"string\");",
											"    pm.expect(jsonData.batchId).to.be.a(\"number\");",
											"    pm.expect(jsonData.batchName).to.be.a(\"string\");",
											"   pm.expect(jsonData.batchNoOfClasses).to.be.a(\"number\");",
											"   pm.expect(jsonData.batchStatus).to.be.a(\"string\");",
											"   pm.expect(jsonData.programId).to.be.a(\"number\");",
											"   pm.expect(jsonData.programName).to.be.a(\"string\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"batchDescription\": \"{{putBatchDescription}}\",\n  \"batchId\": 0,\n  \"batchName\": \"{{batchName_cl}}\",\n  \"batchNoOfClasses\": {{putBatchNoOfClasses}},\n  \"batchStatus\": \"{{putBatchStatus}}\",\n  \"programId\": {{programId_cl}},\n  \"programName\": \"{{programName_cl}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/batches/{{batchId_cl}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches",
										"{{batchId_cl}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative Test cases",
					"item": [
						{
							"name": "GET Batch details by Invalid Batch Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"console.log(jsonData);",
											"pm.test('Status code is 404', function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Message Validation\", function(){",
											"    pm.expect(jsonData.message).contain(\"not found\");",
											"    pm.expect(jsonData.success).to.eql(false);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/batches/batchId/{{invalidBatchID}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches",
										"batchId",
										"{{invalidBatchID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Batch Details by INVALID BatchName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"console.log(jsonData);",
											"",
											"pm.test('Status code is 404', function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/batches/batchName/{{invalidBatchName}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches",
										"batchName",
										"{{invalidBatchName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Batch Details by INVALID ProgramId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"console.log(jsonData);",
											"",
											"pm.test('Status code is 404', function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Message Validation\", function(){",
											"    pm.expect(jsonData.message).contain(\"not found\");",
											"    pm.expect(jsonData.success).to.eql(false);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/batches/program/{{invalidProgramId}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches",
										"program",
										"{{invalidProgramId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new batch without Batch Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"    pm.expect(pm.response.status).contain(\"Bad Request\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"batchDescription\": \"{{BatchDescription1_env}}\",\n  \"batchId\": 0,\n  \"batchName\": \"{{withoutBatchName}}\",\n  \"batchNoOfClasses\": {{BatchNoOfClasses2_env}},\n  \"batchStatus\": \"active\",\n  \"programId\": {{programId_cl}},\n  \"programName\": \"{{programName_cl}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/batches",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new batch with programID value 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"    pm.expect(pm.response.status).contain(\"Bad Request\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"batchDescription\": \"{{BatchDescription1_env}}\",\n  \"batchId\": 0,\n  \"batchName\": \"{{batchName_cl}}\",\n  \"batchNoOfClasses\": {{BatchNoOfClasses2_env}},\n  \"batchStatus\": \"active\",\n  \"programId\": {{programIDZero}},\n  \"programName\": \"{{programName_cl}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/batches",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new batch without Batch status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"    pm.expect(pm.response.status).contain(\"Bad Request\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"batchDescription\": \"{{BatchDescription1_env}}\",\n  \"batchId\": 0,\n  \"batchName\": \"{{batchName_cl}}\",\n  \"batchNoOfClasses\": {{BatchNoOfClasses2_env}},\n  \"batchStatus\": \"{{withoutBatchStatus}}\",\n  \"programId\": {{programId_cl}},\n  \"programName\": \"{{programName_cl}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/batches",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new batch with No of Classes value 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"    pm.expect(pm.response.status).contain(\"Bad Request\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"batchDescription\": \"{{BatchDescription1_env}}\",\n  \"batchId\": 0,\n  \"batchName\": \"{{batchName_cl}}\",\n  \"batchNoOfClasses\": {{noOfClassZero}},\n  \"batchStatus\": \"active\",\n  \"programId\": {{programId_cl}},\n  \"programName\": \"{{programName_cl}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/batches",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new batch with programID value String",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"    pm.expect(pm.response.status).contain(\"Bad Request\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"batchDescription\": \"{{BatchDescription1_env}}\",\n  \"batchId\": 0,\n  \"batchName\": \"{{batchName_cl}}\",\n  \"batchNoOfClasses\": {{BatchNoOfClasses2_env}},\n  \"batchStatus\": \"active\",\n  \"programId\": \"{{programIdString}}\",\n  \"programName\": \"{{programName_cl}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/batches",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new batch with No of Classes value String",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"    pm.expect(pm.response.status).contain(\"Bad Request\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"batchDescription\": \"{{BatchDescription1_env}}\",\n  \"batchId\": 0,\n  \"batchName\": \"{{batchName_cl}}\",\n  \"batchNoOfClasses\": \"{{noOfClassString}}\",\n  \"batchStatus\": \"active\",\n  \"programId\": {{programId_cl}},\n  \"programName\": \"{{programName_cl}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/batches",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new batch with INVALID programID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"batchDescription\": \"{{BatchDescription1_env}}\",\n  \"batchId\": 0,\n  \"batchName\": \"{{batchName_cl}}\",\n  \"batchNoOfClasses\": {{BatchNoOfClasses2_env}},\n  \"batchStatus\": \"active\",\n  \"programId\": {{invalidProgramId}},\n  \"programName\": \"{{programName_cl}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/batches",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new batch with programID which is in INACTIVE status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"",
											"pm.test('Status code is 400', function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"batchDescription\": \"{{BatchDescription1_env}}\",\n  \"batchId\": 0,\n  \"batchName\": \"{{batchName_cl}}\",\n  \"batchNoOfClasses\": {{BatchNoOfClasses2_env}},\n  \"batchStatus\": \"active\",\n  \"programId\": {{programIdInactiveStatus}},\n  \"programName\": \"{{programName_cl}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/batches",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new batch with same existing programID and Batch Name Combination",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"",
											"pm.test('Status code is 400', function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"batchDescription\": \"{{BatchDescription1_env}}\",\n  \"batchId\": 0,\n  \"batchName\": \"{{batchName_cl}}\",\n  \"batchNoOfClasses\": {{BatchNoOfClasses2_env}},\n  \"batchStatus\": \"active\",\n  \"programId\": {{programId_cl}},\n  \"programName\": \"{{programName_cl}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/batches",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new batch with INVALID Batch status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"",
											"pm.test('Status code is 400', function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"batchDescription\": \"{{BatchDescription1_env}}\",\n  \"batchId\": 0,\n  \"batchName\": \"{{batchName_cl}}\",\n  \"batchNoOfClasses\": {{BatchNoOfClasses2_env}},\n  \"batchStatus\": \"{{invalidBatchStatus}}\",\n  \"programId\": {{programId_cl}},\n  \"programName\": \"{{programName_cl}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/batches",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new batch with Batch Name field INTEGER value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"",
											"pm.test('Status code is 400', function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"batchDescription\": \"{{BatchDescription1_env}}\",\n  \"batchId\": 0,\n  \"batchName\": {{batchNameInteger}},\n  \"batchNoOfClasses\": {{BatchNoOfClasses2_env}},\n  \"batchStatus\": \"asw\",\n  \"programId\": {{programId_cl}},\n  \"programName\": \"{{programName_cl}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/batches",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Batch with missing Batch Name by Valid Batch Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"batchDescription\": \"{{BatchDescription2_env}}\",\n  \"batchId\": 0,\n  \"batchName\": \"{{missingBatchName}}\",\n  \"batchNoOfClasses\": {{BatchNoOfClasses1_env}},\n  \"batchStatus\": \"active\",\n  \"programId\": {{programId_cl}},\n  \"programName\": \"{{programName_cl}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/batches/{{batchId_cl}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches",
										"{{batchId_cl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Batch with programID value 0 by Valid Batch Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"batchDescription\": \"{{BatchDescription2_env}}\",\n  \"batchId\": 0,\n  \"batchName\": \"{{batchName_cl}}\",\n  \"batchNoOfClasses\": {{BatchNoOfClasses1_env}},\n  \"batchStatus\": \"active\",\n  \"programId\": {{programIDZero}},\n  \"programName\": \"{{programName_cl}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/batches/{{batchId_cl}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches",
										"{{batchId_cl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Batch with missing programID by Valid Batch Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"batchDescription\": \"{{BatchDescription2_env}}\",\n  \"batchId\": 0,\n  \"batchName\": \"{{batchName_cl}}\",\n  \"batchNoOfClasses\": {{BatchNoOfClasses1_env}},\n  \"batchStatus\": \"active\",\n  \"programId\": \"\",\n  \"programName\": \"{{programName_cl}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/batches/{{batchId_cl}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches",
										"{{batchId_cl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Batch with missing Batch status by Valid Batch Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"batchDescription\": \"{{BatchDescription2_env}}\",\n  \"batchId\": 0,\n  \"batchName\": \"{{batchName_cl}}\",\n  \"batchNoOfClasses\": {{BatchNoOfClasses1_env}},\n  \"batchStatus\": \"{{withoutBatchStatus}}\",\n  \"programId\": {{programId_cl}},\n  \"programName\": \"{{programName_cl}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/batches/{{batchId_cl}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches",
										"{{batchId_cl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Batch with INVALID Batch status by Valid Batch Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"batchDescription\": \"{{BatchDescription2_env}}\",\n  \"batchId\": 0,\n  \"batchName\": \"{{batchName_cl}}\",\n  \"batchNoOfClasses\": {{BatchNoOfClasses1_env}},\n  \"batchStatus\": \"{{invalidBatchStatus}}\",\n  \"programId\": {{programId_cl}},\n  \"programName\": \"{{programName_cl}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/batches/{{batchId_cl}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches",
										"{{batchId_cl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Batch with missing No of Classes by Valid Batch Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"batchDescription\": \"{{BatchDescription2_env}}\",\n  \"batchId\": 0,\n  \"batchName\": \"{{batchName_cl}}\",\n  \"batchNoOfClasses\": \"{{missingNoOfClasses}}\",\n  \"batchStatus\": \"active\",\n  \"programId\": {{programId_cl}},\n  \"programName\": \"{{programName_cl}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/batches/{{batchId_cl}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches",
										"{{batchId_cl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Batch with No of Classes value 0 by Valid Batch Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"batchDescription\": \"{{BatchDescription2_env}}\",\n  \"batchId\": 0,\n  \"batchName\": \"{{batchName_cl}}\",\n  \"batchNoOfClasses\": {{noOfClassZero}},\n  \"batchStatus\": \"active\",\n  \"programId\": {{programId_cl}},\n  \"programName\": \"{{programName_cl}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/batches/{{batchId_cl}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches",
										"{{batchId_cl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Batch by INVALID Batch Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"batchDescription\": \"{{BatchDescription2_env}}\",\n  \"batchId\": 0,\n  \"batchName\": \"{{batchName_cl}}\",\n  \"batchNoOfClasses\": {{BatchNoOfClasses1_env}},\n  \"batchStatus\": \"active\",\n  \"programId\": {{programId_cl}},\n  \"programName\": \"{{programName_cl}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/batches/{{invalidBatchID}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches",
										"{{invalidBatchID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update batch with programID value String",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"batchDescription\": \"{{BatchDescription2_env}}\",\n  \"batchId\": 0,\n  \"batchName\": \"{{batchName_cl}}\",\n  \"batchNoOfClasses\": {{BatchNoOfClasses1_env}},\n  \"batchStatus\": \"active\",\n  \"programId\": \"{{programIdString}}\",\n  \"programName\": \"{{programName_cl}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/batches/{{batchId_cl}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches",
										"{{batchId_cl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update batch with No of Classes value String",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"batchDescription\": \"{{BatchDescription2_env}}\",\n  \"batchId\": 0,\n  \"batchName\": \"{{batchName_cl}}\",\n  \"batchNoOfClasses\": \"{{noOfClassString}}\",\n  \"batchStatus\": \"active\",\n  \"programId\": {{programId_cl}},\n  \"programName\": \"{{programName_cl}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/batches/{{batchId_cl}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches",
										"{{batchId_cl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update batch with INVALID programID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"batchDescription\": \"{{BatchDescription2_env}}\",\n  \"batchId\": 0,\n  \"batchName\": \"{{batchName_cl}}\",\n  \"batchNoOfClasses\": {{BatchNoOfClasses1_env}},\n  \"batchStatus\": \"active\",\n  \"programId\": {{invalidProgramId}},\n  \"programName\": \"{{programName_cl}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/batches/{{batchId_cl}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches",
										"{{batchId_cl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Batch with Batch Name field INTEGER value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"batchDescription\": \"{{BatchDescription2_env}}\",\n  \"batchId\": 0,\n  \"batchName\": {{batchNameInteger}},\n  \"batchNoOfClasses\": {{BatchNoOfClasses1_env}},\n  \"batchStatus\": \"active\",\n  \"programId\": {{programId_cl}},\n  \"programName\": \"{{programName_cl}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/batches/{{batchId_cl}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches",
										"{{batchId_cl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete batch by INVALID BatchId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"batchDescription\": \"{{BatchDescription2_cl}}\",\n  \"batchId\": 0,\n  \"batchName\": \"{{batchName_cl}}\",\n  \"batchNoOfClasses\": {{BatchNoOfClasses1_cl}},\n  \"batchStatus\": \"active\",\n  \"programId\": {{programId_cl}},\n  \"programName\": \"{{programName_cl}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/batches/{{invalidBatchID}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches",
										"{{invalidBatchID}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Team21_API_Validators_User",
			"item": [
				{
					"name": "Create new user with role Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//Set variables\r",
									"\r",
									"const Jsondata = pm.response.json();\r",
									"console.log(Jsondata);\r",
									"pm.collectionVariables.set(\"Userid_mod\",Jsondata.userId)\r",
									"console.log(\"Userid:\"  +Jsondata.userId);\r",
									"pm.collectionVariables.set(\"userComment_mod\", Jsondata.userComments)\r",
									"pm.collectionVariables.set(\"userEduPg_mod\",Jsondata.userEduPg)\r",
									"pm.collectionVariables.set(\"userEduUg_mod\",Jsondata.userEduUg)\r",
									"pm.collectionVariables.set(\"userFirstName_mod\",Jsondata.userFirstName)\r",
									"pm.collectionVariables.set(\"userLastName_mod\",Jsondata.userLastName)\r",
									"pm.collectionVariables.set(\"userLinkedinUrl_mod\",Jsondata.userLinkedinUrl)\r",
									"pm.collectionVariables.set(\"userLocation_mod\",Jsondata.userLocation)\r",
									"//pm.collectionVariables.set(\"loginStatus\",Jsondata.loginStatus)\r",
									"//pm.collectionVariables.set(\"roleId\",Jsondata.roleId\r",
									"pm.collectionVariables.set(\"userLoginEmail_mod\",Jsondata.userLoginEmail)\r",
									"pm.collectionVariables.set(\"userMiddleName_mod\",Jsondata.userMiddleName)\r",
									"pm.collectionVariables.set(\"userPhoneNumber_mod\",Jsondata.userPhoneNumber)\r",
									"pm.collectionVariables.set(\"userTimeZone_mod\",Jsondata.userTimeZone)\r",
									"pm.collectionVariables.set(\"userVisaStatus_mod\",Jsondata.userVisaStatus)\r",
									"\r",
									"pm.test('Status Code name has String,Created', () => {\r",
									"pm.response.to.have.status(\"Created\");})\r",
									"\r",
									"pm.test('Validating Response is not NULL', function () {\r",
									"pm.expect(Jsondata).to.not.equal(null);})\r",
									"\r",
									"//Validate response status\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"/*//Check that a response header is present:\r",
									" pm.test(\"Content-Type header is present\", () => {\r",
									" pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"//Test for a response header having a particular value:\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});*/\r",
									"\r",
									"//Test for the response time to be within a specified range:\r",
									"pm.test(\"Response time is less than 3000ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"var  Schema ={\r",
									"   \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"userComments\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userEduPg\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userEduUg\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userFirstName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLastName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLinkedinUrl\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLocation\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userMiddleName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userPhoneNumber\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"userTimeZone\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userVisaStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"userComments\",\r",
									"    \"userEduPg\",\r",
									"    \"userEduUg\",\r",
									"    \"userFirstName\",\r",
									"    \"userId\",\r",
									"    \"userLastName\",\r",
									"    \"userLinkedinUrl\",\r",
									"    \"userLocation\",\r",
									"    \"userMiddleName\",\r",
									"    \"userPhoneNumber\",\r",
									"    \"userTimeZone\",\r",
									"    \"userVisaStatus\"\r",
									"  ]\r",
									"}\r",
									"pm.test('Schema is valid',function(){\r",
									"    pm.expect(tv4.validate(Jsondata,Schema)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test (\"check UserId is present in the response body\",()=> {\r",
									"    pm.expect(Jsondata.userId).to.eql(pm.collectionVariables.get(\"Userid_mod\"))\r",
									"});\r",
									"\r",
									"pm.test(\"Test Data Type Of the Response\", () => {\r",
									"    pm.expect(Jsondata).to.be.an(\"object\");\r",
									"    pm.expect(Jsondata.userComments).to.be.a(\"string\");\r",
									"    pm.expect(Jsondata.userEduPg).to.be.a(\"string\");\r",
									"    pm.expect(Jsondata.userEduUg).to.be.a(\"string\");\r",
									"   pm.expect(Jsondata.userFirstName).to.be.a(\"string\");\r",
									"   pm.expect(Jsondata.userLastName).to.be.a(\"string\");\r",
									"   pm.expect(Jsondata.userLinkedinUrl).to.be.a(\"string\");\r",
									"   pm.expect(Jsondata.userLocation).to.be.a(\"string\");\r",
									"   pm.expect(Jsondata.userLoginEmail).to.be.a(\"string\");\r",
									"   pm.expect(Jsondata.userMiddleName).to.be.a(\"string\");\r",
									"   pm.expect(Jsondata.userPhoneNumber).to.be.a(\"number\");\r",
									"//pm.expect(Jsondata.roleId).to.be.a(\"string\");\r",
									"  //  pm.expect(Jsondata.userRoleStatus).to.be.a(\"string\");\r",
									"    pm.expect(Jsondata.userTimeZone).to.be.a(\"string\");\r",
									"    pm.expect(Jsondata.userVisaStatus).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('roleId_mod',data.roleId);\r",
									"pm.collectionVariables.set('userRoleStatus_mod',data.userRoleStatus);\r",
									"var moment = require('moment');\r",
									"var CurrentMonthDate = moment().format(\"MMMDD\");\r",
									"var serialNo = pm.variables.replaceIn('{{$randomInt}}');\r",
									"console.log(serialNo+ data['PhoneNumber'] + serialNo)\r",
									"\r",
									"pm.collectionVariables.set('userPhoneNumber',serialNo+ data['PhoneNumber'] + serialNo);\r",
									"pm.collectionVariables.set(\"serialNo_cl\",serialNo)\r",
									"pm.collectionVariables.set('userLoginEmail',serialNo + data['LoginEmail'] )"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": \"{{userPhoneNumber}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with numeric firtsname Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var actualres = pm.response.json()\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(actualres.message).to.eql(\"userFirstName must contain two or more alphabets only\");\r",
									"    pm.expect(actualres.success).to.eql(false);\r",
									"});\r",
									"//pm.test(\"Message Validation\", function(){\r",
									"  //  pm.expect(pm.response.json().error).to.eql(\"userFirstName must contain two or more alphabets only\")});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{NumFN}}\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": \"{{userPhoneNumber}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with missing firtsname Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"    pm.expect(pm.response.status).to.contain('Bad Request');",
									"});",
									"",
									"var actualres = pm.response.json()",
									"pm.test(\"Message Validation\", function(){",
									"    pm.expect(actualres.message).to.eql(\"User First Name is cannot be null or empty\");",
									"    pm.expect(actualres.success).to.eql(false);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n \r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": \"{{userPhoneNumber}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with special char firtsname Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var actualres = pm.response.json()\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(actualres.message).to.eql(\"userFirstName must contain two or more alphabets only\");\r",
									"    pm.expect(actualres.success).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{SCfirstN}}\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": \"{{userPhoneNumber}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with only one alphabet in firtsname Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var actualres = pm.response.json()\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(actualres.message).to.eql(\"userFirstName must contain two or more alphabets only\");\r",
									"    pm.expect(actualres.success).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{OnlycharFN}}\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": \"{{userPhoneNumber}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with missing lastname Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var actualres = pm.response.json()\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(actualres.message).to.eql(\"User Last Name is cannot be null or empty\");\r",
									"    pm.expect(actualres.success).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n \r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": \"{{userPhoneNumber}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with numeric lastname Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var actualres = pm.response.json()\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(actualres.message).to.eql(\"userLastName must contain one or more alphabets only\");\r",
									"    pm.expect(actualres.success).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userLastName\": \"{{NumLN}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": \"{{userPhoneNumber}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with special char lastname Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var actualres = pm.response.json()\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(actualres.message).to.eql(\"userLastName must contain one or more alphabets only\");\r",
									"    pm.expect(actualres.success).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userLastName\": \"{{SCLN}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": \"{{userPhoneNumber}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with missing middlename Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var actualres = pm.response.json()\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(actualres.message).to.eql(\"userMiddleName must contain one or more alphabets only\");\r",
									"    pm.expect(actualres.success).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n  },\r\n  \"userMiddleName\": \"{{MissMN}}\",\r\n  \"userPhoneNumber\": \"{{userPhoneNumber}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with numeric middlename Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var actualres = pm.response.json()\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(actualres.message).to.eql(\"userMiddleName must contain one or more alphabets only\");\r",
									"    pm.expect(actualres.success).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n  },\r\n  \"userMiddleName\": \"{{NumMN}}\",\r\n  \"userPhoneNumber\": \"{{userPhoneNumber}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with special char middlename Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var actualres = pm.response.json()\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(actualres.message).to.eql(\"userMiddleName must contain one or more alphabets only\");\r",
									"    pm.expect(actualres.success).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n  },\r\n  \"userMiddleName\": \"{{SCmidName}}\",\r\n  \"userPhoneNumber\": \"{{userPhoneNumber}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with missing Timezone Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var actualres = pm.response.json()\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(actualres.message).to.eql(\"Failed to create user, as 'TimeZone' is invalid !! \");\r",
									"    pm.expect(actualres.success).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"var CurrentMonthDate = moment().format(\"MMMDD\");\r",
									"var serialNo = pm.variables.replaceIn('{{$randomInt}}');\r",
									"console.log(serialNo+ data['PhoneNumber'] + serialNo)\r",
									"\r",
									"pm.collectionVariables.set('UpdatedUserPhoneNumber', 1 + data['PhoneNumber'] + serialNo +serialNo);\r",
									"pm.collectionVariables.set(\"serialNo_cl\",serialNo)\r",
									"pm.collectionVariables.set('UpdatedUserLoginEmail',serialNo+serialNo + data['LoginEmail'] )"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{UpdatedUserLoginEmail}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": \"{{UpdatedUserPhoneNumber}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n \r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with invalid Timezone Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var actualres = pm.response.json()\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(actualres.message).to.eql(\"Failed to create user, as 'TimeZone' is invalid !! \");\r",
									"    pm.expect(actualres.success).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{UpdatedUserLoginEmail}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": \"{{UpdatedUserPhoneNumber}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{InvalidTz}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with small letter Timezone Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var actualres = pm.response.json()\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(actualres.message).to.eql(\"Failed to create user, as 'TimeZone' is invalid !! \");\r",
									"    pm.expect(actualres.success).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{UpdatedUserLoginEmail}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": \"{{UpdatedUserPhoneNumber}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{SmallTZ}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with missing Roleid Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var actualres = pm.response.json()\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(actualres.message).to.eql(\"Role Id is mandatory\");\r",
									"    pm.expect(actualres.success).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{UpdatedUserLoginEmail}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": \"{{UpdatedUserPhoneNumber}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with invalid Roleid Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var actualres = pm.response.json()\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(actualres.message).contain(\"Failed to create user, as 'roleId' is invalid !! \");\r",
									"    pm.expect(actualres.success).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{UpdatedUserLoginEmail}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": \"{{UpdatedUserPhoneNumber}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{invalidroleid}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with missing Rolestatus Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"\r",
									"\r",
									"var actualres = pm.response.json()\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(actualres.message).contain(\"Invalid Status: must be Active or Inactive\");\r",
									"    pm.expect(actualres.success).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{UpdatedUserLoginEmail}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": \"{{UpdatedUserPhoneNumber}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{MissRolesta}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with invalid Rolestatus Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var actualres = pm.response.json()\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(actualres.message).to.eql(\"Invalid Status: must be Active or Inactive\");\r",
									"    pm.expect(actualres.success).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{UpdatedUserLoginEmail}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": \"{{UpdatedUserPhoneNumber}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{InvRolest}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with missing Visa status Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var actualres = pm.response.json()\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(actualres.message).to.eql(\"Failed to create user, as 'Visa Status' is invalid !! \");\r",
									"    pm.expect(actualres.success).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{UpdatedUserLoginEmail}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": \"{{UpdatedUserPhoneNumber}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{Missvisa}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with invalid Visastatus Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var actualres = pm.response.json()\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(actualres.message).to.eql(\"Failed to create user, as 'Visa Status' is invalid !! \");\r",
									"    pm.expect(actualres.success).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{UpdatedUserLoginEmail}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": \"{{UpdatedUserPhoneNumber}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{invalidvisa}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with missing Linkedin Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var actualres = pm.response.json()\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(actualres.message).to.eql(\"userLinkedinUrlmust contain www.linkedin.com\");\r",
									"    pm.expect(actualres.success).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userLinkedinUrl\": \"{{MissLink}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": \"{{userPhoneNumber}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with invalid Linkedin Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var actualres = pm.response.json()\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(actualres.message).to.eql(\"userLinkedinUrlmust contain www.linkedin.com\");\r",
									"    pm.expect(actualres.success).to.eql(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userLinkedinUrl\": \"{{InvaLink}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": \"{{userPhoneNumber}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with missing EDUUG Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var actualres = pm.response.json()\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(actualres.message).to.eql(\"userEduUg must begin with alphabet and can contain only alphanumeric characters\");\r",
									"    pm.expect(actualres.success).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n \"userEduUg\": \"{{MissinEDUUG}}\", \r\n    \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": \"{{userPhoneNumber}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with numeric EDUUG Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var actualres = pm.response.json()\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(actualres.message).to.eql(\"userEduUg must begin with alphabet and can contain only alphanumeric characters\");\r",
									"    pm.expect(actualres.success).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{Numeduug}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": \"{{userPhoneNumber}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with missing EDUPG Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var actualres = pm.response.json()\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(actualres.message).to.eql(\"userEduPgmust begin with alphabet and can contain only alphanumeric characters\");\r",
									"    pm.expect(actualres.success).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{MissinEDUPG}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": \"{{userPhoneNumber}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with numeric EDUPG Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var actualres = pm.response.json()\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(actualres.message).to.eql(\"userEduPgmust begin with alphabet and can contain only alphanumeric characters\");\r",
									"    pm.expect(actualres.success).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{Numedupg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": \"{{userPhoneNumber}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with missing Loginemail Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{Missingemail}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": \"{{userPhoneNumber}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with unformated Loginemail Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{Unformatmail}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": \"{{userPhoneNumber}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with missing phonenumber Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var actualres = pm.response.json()\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(actualres.message).to.eql(\"Phone Number is required\");\r",
									"    pm.expect(actualres.success).to.eql(false);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": \"{{MissPhoneNumber}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with special char phonenum Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var actualres = pm.response.json()\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(actualres.message).to.eql(\"Phone number must be integer only\");\r",
									"    pm.expect(actualres.success).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": \"{{Scpho}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with alpabetic phonenum Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var actualres = pm.response.json()\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(actualres.message).to.eql(\"Phone number must be integer only\");\r",
									"    pm.expect(actualres.success).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": \"{{Alpphone}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with phonenum digits > 10 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"var actualres = pm.response.json()\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(actualres.message).to.eql(\"Phone number should be 10 digit\");\r",
									"    pm.expect(actualres.success).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"var CurrentMonthDate = moment().format(\"MMMDD\");\r",
									"var serialNo = pm.variables.replaceIn('{{$randomInt}}');\r",
									"console.log(serialNo+ data['PhoneNumber'] + serialNo)\r",
									"\r",
									"pm.collectionVariables.set('UpdatedUserPhoneNumbergreater', 2 + data['PhoneNumber'] + serialNo +serialNo);\r",
									"pm.collectionVariables.set(\"serialNo_cl\",serialNo)\r",
									"pm.collectionVariables.set('UpdatedUserLoginEmailgreater',serialNo+serialNo + data['LoginEmail'] )"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{UpdatedUserLoginEmailgreater}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": \"{{UpdatedUserPhoneNumbergreater}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with phonenum digits starting 0 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"var actualres = pm.response.json()\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(actualres.message).to.eql(\"Enter phone no in this format (CountryCode)(PhoneNo) +91 1234567890\");\r",
									"    pm.expect(actualres.success).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": \"{{Zeroph}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with phonenum digits < 10 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var actualres = pm.response.json()\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(actualres.message).to.eql(\"Phone number should be 10 digit\");\r",
									"    pm.expect(actualres.success).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"var CurrentMonthDate = moment().format(\"MMMDD\");\r",
									"var serialNo = pm.variables.replaceIn('{{$randomInt}}');\r",
									"console.log(serialNo+ data['PhoneNumber'] + serialNo)\r",
									"\r",
									"pm.collectionVariables.set('UpdatedUserPhoneNumberlesser', 3 + data['PhoneNumber'] + serialNo +serialNo);\r",
									"pm.collectionVariables.set(\"serialNo_cl\",serialNo)\r",
									"pm.collectionVariables.set('UpdatedUserLoginEmaillesser',serialNo+serialNo + data['LoginEmail'] )"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{UpdatedUserLoginEmaillesser}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": \"{{UpdatedUserPhoneNumberlesser}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with existing phonenum Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var actualres = pm.response.json()\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(actualres.message).contain(\"Failed to create new User as phone number\");\r",
									"    pm.expect(actualres.success).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with existing Loginemail Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var actualres = pm.response.json()\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(actualres.message).to.eql(\"Failed to create new UserLogin as email already exists!\");\r",
									"    pm.expect(actualres.success).to.eql(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"var CurrentMonthDate = moment().format(\"MMMDD\");\r",
									"var serialNo = pm.variables.replaceIn('{{$randomInt}}');\r",
									"console.log(serialNo+ data['PhoneNumber'] + serialNo)\r",
									"\r",
									"pm.collectionVariables.set('UpdatedUserPhoneNumbermail',  + data['PhoneNumber'] + serialNo +serialNo);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{userLoginEmail_cl}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": \"{{UpdatedUserPhoneNumbermail}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users Copy",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/users",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users invalid endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"    pm.expect(pm.response.status).contain(\"Not Found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/userss",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"userss"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All roles Copy",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/users/roles",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Information by userid Copy",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/users/{{Userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"{{Userid_mod}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Information by invalid userid Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"    pm.expect(pm.response.status).contain(\"Not Found\");\r",
									"});\r",
									"\r",
									"var actualres = pm.response.json()\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(actualres.message).contain(\"User not found with Id\");\r",
									"    pm.expect(actualres.success).to.eql(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/users/{{InvalidUserId}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"{{InvalidUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Users with Roles Copy",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/roles",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get count of active and inactive users with R01",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/users/byStatus?id=R01",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"byStatus"
							],
							"query": [
								{
									"key": "id",
									"value": "R01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get count of active and inactive users with R02",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/users/byStatus?id=R02",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"byStatus"
							],
							"query": [
								{
									"key": "id",
									"value": "R02"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get count of active and inactive users with R03",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/users/byStatus?id=R03",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"byStatus"
							],
							"query": [
								{
									"key": "id",
									"value": "R03"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get count of active and inactive all users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/users/byStatus",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"byStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get count of active and inactive invalid roleid users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/users/byStatus?id=R08",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"byStatus"
							],
							"query": [
								{
									"key": "id",
									"value": "R08"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by program batches Copy",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/users/programBatch/{{batchid_user}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"programBatch",
								"{{batchid_user}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by program batches invalid batchid Copy",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/users/programBatch/{{invalid_Bid_User}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"programBatch",
								"{{invalid_Bid_User}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user for program Copy",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/users/programs/{{programid_user}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"programs",
								"{{programid_user}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user for program invalid programid Copy",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/users/programs/{{invalid_PGID_User}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"programs",
								"{{invalid_PGID_User}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Users By RoleId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"const schema =  {",
									"    \"type\": \"array\",",
									"    \"items\": {",
									"        \"$ref\": \"#/definitions/Welcome8Element\"",
									"    },",
									"    \"definitions\": {",
									"        \"Welcome8Element\": {",
									"            \"type\": \"object\",",
									"            \"additionalProperties\": false,",
									"            \"properties\": {",
									"                \"userId\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"userFirstName\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"userLastName\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"userMiddleName\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"userPhoneNumber\": {",
									"                    \"type\": \"integer\"",
									"                },",
									"                \"userLocation\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"userTimeZone\": {",
									"                    \"$ref\": \"#/definitions/UserTimeZone\"",
									"                },",
									"                \"userLinkedinUrl\": {",
									"                    \"anyOf\": [",
									"                        {",
									"                            \"type\": \"null\"",
									"                        },",
									"                        {",
									"                            \"type\": \"string\",",
									"                            \"qt-uri-protocols\": [",
									"                                \"http\",",
									"                                \"https\"",
									"                            ]",
									"                        }",
									"                    ]",
									"                },",
									"                \"userEduUg\": {",
									"                    \"anyOf\": [",
									"                        {",
									"                            \"type\": \"null\"",
									"                        },",
									"                        {",
									"                            \"type\": \"string\"",
									"                        }",
									"                    ]",
									"                },",
									"                \"userEduPg\": {",
									"                    \"anyOf\": [",
									"                        {",
									"                            \"type\": \"null\"",
									"                        },",
									"                        {",
									"                            \"type\": \"string\"",
									"                        }",
									"                    ]",
									"                },",
									"                \"userComments\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"userVisaStatus\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"userLoginEmail\": {",
									"                    \"type\": \"null\"",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"userEduPg\",",
									"                \"userEduUg\",",
									"                \"userFirstName\",",
									"                \"userId\",",
									"                \"userLastName\",",
									"                \"userLinkedinUrl\",",
									"                \"userLocation\",",
									"                \"userLoginEmail\",",
									"                \"userPhoneNumber\",",
									"                \"userTimeZone\",",
									"                \"userVisaStatus\"",
									"            ],",
									"            \"title\": \"Welcome8Element\"",
									"        },",
									"        \"UserTimeZone\": {",
									"            \"type\": \"string\",",
									"            \"enum\": [",
									"                \"CST\",",
									"                \"EST\",",
									"                \"PST\",",
									"                \"MST\",",
									"                \"IST\"",
									"            ],",
									"            \"title\": \"UserTimeZone\"",
									"        }",
									"    }",
									"}",
									"",
									"    ",
									"pm.test(\"JsonSchema Validation\", function(){",
									"    pm.response.to.have.jsonSchema(schema);",
									"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;",
									"});",
									"pm.test(\"Content-Type header is application/json\", ()=>{",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Transfer Encoding Validation\", ()=>{",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/users/roles/{{roleId_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roles",
								"{{roleId_mod}}"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Users By Invalid RoleId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Status code is 404', function () {\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(jsonData.message).contain(\"not found\");\r",
									"    pm.expect(jsonData.success).to.eql(false);\r",
									"});\r",
									"const schema = {\r",
									"    \"$ref\": \"#/definitions/Welcome10\",\r",
									"    \"definitions\": {\r",
									"        \"Welcome10\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"message\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"message\",\r",
									"                \"success\"\r",
									"            ],\r",
									"            \"title\": \"Welcome10\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"pm.test(\"JsonSchema Validation\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/users/roles/R04",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roles",
								"R04"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Users By RoleId V2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"const schema = {\r",
									"    \r",
									"    \"$ref\": \"#/definitions/Welcome2\",\r",
									"    \"definitions\": {\r",
									"        \"Welcome2\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"users\": {\r",
									"                    \"type\": \"array\",\r",
									"                    \"items\": {\r",
									"                        \"$ref\": \"#/definitions/User\"\r",
									"                    }\r",
									"                },\r",
									"                \"facets\": {\r",
									"                    \"$ref\": \"#/definitions/Facets\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"facets\",\r",
									"                \"users\"\r",
									"            ],\r",
									"            \"title\": \"Welcome2\"\r",
									"        },\r",
									"        \"Facets\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"facetedFields\": {\r",
									"                    \"type\": \"array\",\r",
									"                    \"items\": {\r",
									"                        \"$ref\": \"#/definitions/FacetedField\"\r",
									"                    }\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"facetedFields\"\r",
									"            ],\r",
									"            \"title\": \"Facets\"\r",
									"        },\r",
									"        \"FacetedField\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"displayName\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"filterValues\": {\r",
									"                    \"type\": \"array\",\r",
									"                    \"items\": {\r",
									"                        \"$ref\": \"#/definitions/FilterValue\"\r",
									"                    }\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"displayName\",\r",
									"                \"filterValues\"\r",
									"            ],\r",
									"            \"title\": \"FacetedField\"\r",
									"        },\r",
									"        \"FilterValue\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"name\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"count\": {\r",
									"                    \"type\": \"integer\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"count\",\r",
									"                \"name\"\r",
									"            ],\r",
									"            \"title\": \"FilterValue\"\r",
									"        },\r",
									"        \"User\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"userId\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userFirstName\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userLastName\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userMiddleName\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userPhoneNumber\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"userLocation\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userTimeZone\": {\r",
									"                    \"$ref\": \"#/definitions/UserTimeZone\"\r",
									"                },\r",
									"                \"userLinkedinUrl\": {\r",
									"                    \"anyOf\": [\r",
									"                        {\r",
									"                            \"type\": \"null\"\r",
									"                        },\r",
									"                        {\r",
									"                            \"type\": \"string\",\r",
									"                            \"qt-uri-protocols\": [\r",
									"                                \"http\",\r",
									"                                \"https\"\r",
									"                            ]\r",
									"                        }\r",
									"                    ]\r",
									"                },\r",
									"                \"userEduUg\": {\r",
									"                    \"anyOf\": [\r",
									"                        {\r",
									"                            \"type\": \"null\"\r",
									"                        },\r",
									"                        {\r",
									"                            \"type\": \"string\"\r",
									"                        }\r",
									"                    ]\r",
									"                },\r",
									"                \"userEduPg\": {\r",
									"                    \"anyOf\": [\r",
									"                        {\r",
									"                            \"type\": \"null\"\r",
									"                        },\r",
									"                        {\r",
									"                            \"type\": \"string\"\r",
									"                        }\r",
									"                    ]\r",
									"                },\r",
									"                \"userComments\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userVisaStatus\": {\r",
									"                    \"$ref\": \"#/definitions/UserVisaStatus\"\r",
									"                },\r",
									"                \"userLoginEmail\": {\r",
									"                    \"anyOf\": [\r",
									"                        {\r",
									"                            \"type\": \"null\"\r",
									"                        },\r",
									"                        {\r",
									"                            \"type\": \"string\"\r",
									"                        }\r",
									"                    ]\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"userEduPg\",\r",
									"                \"userEduUg\",\r",
									"                \"userFirstName\",\r",
									"                \"userId\",\r",
									"                \"userLastName\",\r",
									"                \"userLinkedinUrl\",\r",
									"                \"userLocation\",\r",
									"                \"userLoginEmail\",\r",
									"                \"userPhoneNumber\",\r",
									"                \"userTimeZone\",\r",
									"                \"userVisaStatus\"\r",
									"            ],\r",
									"            \"title\": \"User\"\r",
									"        },\r",
									"        \"UserTimeZone\": {\r",
									"            \"type\": \"string\",\r",
									"            \"enum\": [\r",
									"                \"EST\",\r",
									"                \"PST\",\r",
									"                \"CST\",\r",
									"                \"MST\",\r",
									"                \"IST\"\r",
									"            ],\r",
									"            \"title\": \"UserTimeZone\"\r",
									"        },\r",
									"        \"UserVisaStatus\": {\r",
									"            \"type\": \"string\",\r",
									"            \"enum\": [\r",
									"                \"GC-EAD\",\r",
									"                \"H4\",\r",
									"                \"H4-EAD\",\r",
									"                \"H1B\",\r",
									"                \"US-Citizen\",\r",
									"                \"Indian-Citizen\",\r",
									"                \"NA\",\r",
									"                \"Not-Specified\",\r",
									"                \"Canada-EAD\",\r",
									"                \"Canada-Citizen\"\r",
									"            ],\r",
									"            \"title\": \"UserVisaStatus\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(\"JsonSchema validation\", function () {\r",
									"     pm.response.to.have.jsonSchema(schema);\r",
									"     pm.expect(pm.response.json()).to.be.an('object');\r",
									"     pm.expect(pm.response.json()).to.have.property('users').that.is.an('array');\r",
									"     pm.expect(pm.response.json().users).to.have.lengthOf.at.least(1, \"At least one user should be present\");\r",
									"     pm.expect(pm.response.json()).to.have.property('facets').that.is.an('object');\r",
									"     pm.expect(pm.response.json().facets).to.have.property('facetedFields').that.is.an('array');\r",
									"     pm.expect(pm.response.json().facets.facetedFields).to.have.lengthOf.at.least(1, \"At least one faceted field should be present\");\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/v2/users",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Active Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"const schema = {\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"$ref\": \"#/definitions/Welcome7Element\"\r",
									"    },\r",
									"    \"definitions\": {\r",
									"        \"Welcome7Element\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"userId\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userFirstName\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userLastName\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userMiddleName\": {\r",
									"                    \"anyOf\": [\r",
									"                        {\r",
									"                            \"type\": \"null\"\r",
									"                        },\r",
									"                        {\r",
									"                            \"type\": \"string\"\r",
									"                        }\r",
									"                    ]\r",
									"                },\r",
									"                \"userPhoneNumber\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"userLocation\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userTimeZone\": {\r",
									"                    \"$ref\": \"#/definitions/UserTimeZone\"\r",
									"                },\r",
									"                \"userLinkedinUrl\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"qt-uri-protocols\": [\r",
									"                        \"http\",\r",
									"                        \"https\"\r",
									"                    ]\r",
									"                },\r",
									"                \"userEduUg\": {\r",
									"                    \"anyOf\": [\r",
									"                        {\r",
									"                            \"type\": \"null\"\r",
									"                        },\r",
									"                        {\r",
									"                            \"type\": \"string\"\r",
									"                        }\r",
									"                    ]\r",
									"                },\r",
									"                \"userEduPg\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userComments\": {\r",
									"                    \"anyOf\": [\r",
									"                        {\r",
									"                            \"type\": \"null\"\r",
									"                        },\r",
									"                        {\r",
									"                            \"type\": \"string\"\r",
									"                        }\r",
									"                    ]\r",
									"                },\r",
									"                \"userVisaStatus\": {\r",
									"                    \"$ref\": \"#/definitions/UserVisaStatus\"\r",
									"                },\r",
									"                \"hibernateLazyInitializer\": {\r",
									"                    \"$ref\": \"#/definitions/HibernateLazyInitializer\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"hibernateLazyInitializer\",\r",
									"                \"userComments\",\r",
									"                \"userEduPg\",\r",
									"                \"userEduUg\",\r",
									"                \"userFirstName\",\r",
									"                \"userId\",\r",
									"                \"userLastName\",\r",
									"                \"userLinkedinUrl\",\r",
									"                \"userLocation\",\r",
									"                \"userMiddleName\",\r",
									"                \"userPhoneNumber\",\r",
									"                \"userTimeZone\",\r",
									"                \"userVisaStatus\"\r",
									"            ],\r",
									"            \"title\": \"Welcome7Element\"\r",
									"        },\r",
									"        \"HibernateLazyInitializer\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"title\": \"HibernateLazyInitializer\"\r",
									"        },\r",
									"        \"UserTimeZone\": {\r",
									"            \"type\": \"string\",\r",
									"            \"enum\": [\r",
									"                \"EST\",\r",
									"                \"CST\",\r",
									"                \"IST\",\r",
									"                \"PST\",\r",
									"                \"MST\"\r",
									"            ],\r",
									"            \"title\": \"UserTimeZone\"\r",
									"        },\r",
									"        \"UserVisaStatus\": {\r",
									"            \"type\": \"string\",\r",
									"            \"enum\": [\r",
									"                \"Not-Specified\",\r",
									"                \"US-Citizen\",\r",
									"                \"H1B\",\r",
									"                \"H4\",\r",
									"                \"GC-EAD\",\r",
									"                \"H4-EAD\",\r",
									"                \"Canada-EAD\",\r",
									"                \"Indian-Citizen\",\r",
									"                \"Canada-Citizen\",\r",
									"                \"NA\"\r",
									"            ],\r",
									"            \"title\": \"UserVisaStatus\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"JsonSchema Validation\", function (){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/users/activeUsers",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"activeUsers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const schema = {\r",
									"    \r",
									"    \"definitions\": {\r",
									"        \"Welcome3\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"userId\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userFirstName\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userLastName\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userMiddleName\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userPhoneNumber\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"userLocation\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userTimeZone\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userLinkedinUrl\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userEduUg\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userEduPg\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userComments\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userVisaStatus\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userLoginEmail\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"userComments\",\r",
									"                \"userEduPg\",\r",
									"                \"userEduUg\",\r",
									"                \"userFirstName\",\r",
									"                \"userId\",\r",
									"                \"userLastName\",\r",
									"                \"userLinkedinUrl\",\r",
									"                \"userLocation\",\r",
									"                \"userLoginEmail\",\r",
									"                \"userMiddleName\",\r",
									"                \"userPhoneNumber\",\r",
									"                \"userTimeZone\",\r",
									"                \"userVisaStatus\"\r",
									"            ],\r",
									"            \"title\": \"Welcome3\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"pm.test(\"JasonSchema Validation\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"        });\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComment_mod}}\",\r\n  \"userEduPg\": \"{{userEduPg_mod}}\",\r\n  \"userEduUg\": \"{{userEduUg_mod}}\",\r\n  \"userFirstName\": \"{{UpdateFirstName}}\",\r\n  \"userId\": \"{{Userid_mod}}\",\r\n  \"userLastName\": \"{{userLastName_mod}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_mod}}\",\r\n  \"userLocation\": \"{{userLocation_mod}}\",\r\n  \"userLoginEmail\": \"{{userLoginEmail_mod}}\",\r\n  \"userMiddleName\": \"{{userMiddleName_mod}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber_mod}},\r\n  \"userTimeZone\": \"{{userTimeZone_mod}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus_mod}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/{{Userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"{{Userid_mod}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User With Missing Timezone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"const schema = {\r",
									"        \"definitions\": {\r",
									"        \"Welcome2\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"message\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"message\",\r",
									"                \"success\"\r",
									"            ],\r",
									"            \"title\": \"Welcome2\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"var res = pm.response.json()\r",
									"pm.test(\"JasonSchema Validation\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    pm.expect(res).to.have.property('message');\r",
									"    pm.expect(res).to.have.property('success');\r",
									"});\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(res.message).to.eql(\"Failed to update user, as 'TimeZone' is invalid !! \");\r",
									"    pm.expect(res.success).to.eql(false);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComment_mod}}\",\r\n  \"userEduPg\": \"{{userEduPg_mod}}\",\r\n  \"userEduUg\": \"{{userEduUg_mod}}\",\r\n  \"userFirstName\": \"{{userFirstName_mod}}\",\r\n  \"userId\": \"{{Userid_mod}}\",\r\n  \"userLastName\": \"{{userLastName_mod}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_mod}}\",\r\n  \"userLocation\": \"{{userLocation_mod}}\",\r\n  \"userLoginEmail\": \"{{userLoginEmail_mod}}\",\r\n  \"userMiddleName\": \"{{userMiddleName_mod}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber_mod}},\r\n  \"userVisaStatus\": \"{{userVisaStatus_mod}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/{{Userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"{{Userid_mod}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User With Missing Visa Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"const schema = {\r",
									"        \"definitions\": {\r",
									"        \"Welcome2\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"message\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"message\",\r",
									"                \"success\"\r",
									"            ],\r",
									"            \"title\": \"Welcome2\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"var res = pm.response.json()\r",
									"pm.test(\"JasonSchema Validation\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    pm.expect(res).to.have.property('message');\r",
									"    pm.expect(res).to.have.property('success');\r",
									"});\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(res.message).to.eql(\"Failed to update user, as 'Visa Status' is invalid !! \");\r",
									"    pm.expect(res.success).to.eql(false);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComment_mod}}\",\r\n  \"userEduPg\": \"{{userEduPg_mod}}\",\r\n  \"userEduUg\": \"{{userEduUg_mod}}\",\r\n  \"userFirstName\": \"{{userFirstName_mod}}\",\r\n  \"userId\": \"{{Userid_mod}}\",\r\n  \"userLastName\": \"{{userLastName_mod}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_mod}}\",\r\n  \"userLocation\": \"{{userLocation_mod}}\",\r\n  \"userLoginEmail\": \"{{userLoginEmail_mod}}\",\r\n  \"userMiddleName\": \"{{userMiddleName_mod}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber_mod}},\r\n  \"userTimeZone\": \"{{userTimeZone_mod}}\"\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/{{Userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"{{Userid_mod}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User with Missing LastName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"const schema = {\r",
									"        \"definitions\": {\r",
									"        \"Welcome2\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"message\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"message\",\r",
									"                \"success\"\r",
									"            ],\r",
									"            \"title\": \"Welcome2\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"var res = pm.response.json()\r",
									"pm.test(\"JasonSchema Validation\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    pm.expect(res).to.have.property('message');\r",
									"    pm.expect(res).to.have.property('success');\r",
									"});\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(res.message).to.eql(\"User Last Name is mandatory\");\r",
									"    pm.expect(res.success).to.eql(false);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComment_mod}}\",\r\n  \"userEduPg\": \"{{userEduPg_mod}}\",\r\n  \"userEduUg\": \"{{userEduUg_mod}}\",\r\n  \"userFirstName\": \"{{userFirstName_mod}}\",\r\n  \"userId\": \"{{Userid_mod}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_mod}}\",\r\n  \"userLocation\": \"{{userLocation_mod}}\",\r\n  \"userLoginEmail\": \"{{userLoginEmail_mod}}\",\r\n  \"userMiddleName\": \"{{userMiddleName_mod}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber_mod}},\r\n  \"userTimeZone\": \"{{userTimeZone_mod}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus_mod}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/{{Userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"{{Userid_mod}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User With Missing UserPhoneNumber",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"const schema = {\r",
									"        \"definitions\": {\r",
									"        \"Welcome2\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"message\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"message\",\r",
									"                \"success\"\r",
									"            ],\r",
									"            \"title\": \"Welcome2\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"var res = pm.response.json()\r",
									"pm.test(\"JasonSchema Validation\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    pm.expect(res).to.have.property('message');\r",
									"    pm.expect(res).to.have.property('success');\r",
									"});\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(res.message).to.eql(\"Phone Number is required\");\r",
									"    pm.expect(res.success).to.eql(false);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComment_mod}}\",\r\n  \"userEduPg\": \"{{userEduPg_mod}}\",\r\n  \"userEduUg\": \"{{userEduUg_mod}}\",\r\n  \"userFirstName\": \"{{userFirstName_mod}}\",\r\n  \"userId\": \"{{Userid_mod}}\",\r\n  \"userLastName\": \"{{userLastName_mod}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_mod}}\",\r\n  \"userLocation\": \"{{userLocation_mod}}\",\r\n  \"userLoginEmail\": \"{{userLoginEmail_mod}}\",\r\n  \"userMiddleName\": \"{{userMiddleName_mod}}\",\r\n  \"userTimeZone\": \"{{userTimeZone_mod}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus_mod}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/{{Userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"{{Userid_mod}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User With Missing FirstName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"const schema = {\r",
									"        \"definitions\": {\r",
									"        \"Welcome2\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"message\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"message\",\r",
									"                \"success\"\r",
									"            ],\r",
									"            \"title\": \"Welcome2\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"var res = pm.response.json()\r",
									"pm.test(\"JasonSchema Validation\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    pm.expect(res).to.have.property('message');\r",
									"    pm.expect(res).to.have.property('success');\r",
									"});\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(res.message).to.eql(\"User First Name is mandatory\");\r",
									"    pm.expect(res.success).to.eql(false);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComment_mod}}\",\r\n  \"userEduPg\": \"{{userEduPg_mod}}\",\r\n  \"userEduUg\": \"{{userEduUg_mod}}\",\r\n  \"userId\": \"{{Userid_mod}}\",\r\n  \"userLastName\": \"{{userLastName_mod}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_mod}}\",\r\n  \"userLocation\": \"{{userLocation_mod}}\",\r\n  \"userLoginEmail\": \"{{userLoginEmail_mod}}\",\r\n  \"userMiddleName\": \"{{userMiddleName_mod}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber_mod}},\r\n  \"userTimeZone\": \"{{userTimeZone_mod}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus_mod}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/{{Userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"{{Userid_mod}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User with Invalid UserId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"    pm.expect(pm.response.status).contain(\"Not Found\");\r",
									"});\r",
									"const schema = {\r",
									"        \"definitions\": {\r",
									"        \"Welcome2\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"message\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"message\",\r",
									"                \"success\"\r",
									"            ],\r",
									"            \"title\": \"Welcome2\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"var res = pm.response.json()\r",
									"pm.test(\"JasonSchema Validation\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    pm.expect(res).to.have.property('message');\r",
									"    pm.expect(res).to.have.property('success');\r",
									"});\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(res.message).to.eql(\"UserID: U15000 Not Found\");\r",
									"    pm.expect(res.success).to.eql(false);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComment_mod}}\",\r\n  \"userEduPg\": \"{{userEduPg_mod}}\",\r\n  \"userEduUg\": \"{{userEduUg_mod}}\",\r\n  \"userFirstName\": \"{{userFirstName_mod}}\",\r\n  \"userId\": \"{{Userid_mod}}\",\r\n  \"userLastName\": \"{{userLastName_mod}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_mod}}\",\r\n  \"userLocation\": \"{{userLocation_mod}}\",\r\n  \"userLoginEmail\": \"{{userLoginEmail_mod}}\",\r\n  \"userMiddleName\": \"{{userMiddleName_mod}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber_mod}},\r\n  \"userTimeZone\": \"{{userTimeZone_mod}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus_mod}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/U15000",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"U15000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Using Existing User Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"const schema = {\r",
									"        \"definitions\": {\r",
									"        \"Welcome2\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"message\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"message\",\r",
									"                \"success\"\r",
									"            ],\r",
									"            \"title\": \"Welcome2\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"var res = pm.response.json()\r",
									"pm.test(\"JasonSchema Validation\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    pm.expect(res).to.have.property('message');\r",
									"    pm.expect(res).to.have.property('success');\r",
									"});\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(res.message).to.eql(\"User exists\");\r",
									"    pm.expect(res.success).to.eql(false);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComment_mod}}\",\r\n  \"userEduPg\": \"{{userEduPg_mod}}\",\r\n  \"userEduUg\": \"{{userEduUg_mod}}\",\r\n  \"userFirstName\": \"{{userFirstName_mod}}\",\r\n  \"userId\": \"{{Userid_mod}}\",\r\n  \"userLastName\": \"{{userLastName_mod}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_mod}}\",\r\n  \"userLocation\": \"{{userLocation_mod}}\",\r\n  \"userLoginEmail\": \"{{Existing_email}}\",\r\n  \"userMiddleName\": \"{{userMiddleName_mod}}\",\r\n  \"userPhoneNumber\": {{Existing_phone}},\r\n  \"userTimeZone\": \"{{userTimeZone_mod}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus_mod}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/{{Userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"{{Userid_mod}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user phone number with country code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"const schema ={\r",
									"   \r",
									"    \"definitions\": {\r",
									"        \"Welcome10\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"timestamp\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"date-time\"\r",
									"                },\r",
									"                \"status\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"path\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"error\",\r",
									"                \"path\",\r",
									"                \"status\",\r",
									"                \"timestamp\"\r",
									"            ],\r",
									"            \"title\": \"Welcome10\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"var res = pm.response.json()\r",
									"pm.test(\"JasonSchema Validation\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    pm.expect(res).to.have.property('error');\r",
									"    pm.expect(res).to.have.property('status');\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComment_mod}}\",\r\n  \"userEduPg\": \"{{userEduPg_mod}}\",\r\n  \"userEduUg\": \"{{userEduUg_mod}}\",\r\n  \"userFirstName\": \"{{userFirstName_mod}}\",\r\n  \"userId\": \"{{Userid_mod}}\",\r\n  \"userLastName\": \"{{userLastName_mod}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_mod}}\",\r\n  \"userLocation\": \"{{userLocation_mod}}\",\r\n  \"userLoginEmail\": \"{{userLoginEmail_mod}}\",\r\n  \"userMiddleName\": \"{{userMiddleName_mod}}\",\r\n  \"userPhoneNumber\": {{country_code}},\r\n  \"userTimeZone\": \"{{userTimeZone_mod}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus_mod}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/{{Userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"{{Userid_mod}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User PhoneNumber With Scpecial Characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"const schema ={\r",
									"   \r",
									"    \"definitions\": {\r",
									"        \"Welcome10\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"timestamp\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"date-time\"\r",
									"                },\r",
									"                \"status\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"path\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"error\",\r",
									"                \"path\",\r",
									"                \"status\",\r",
									"                \"timestamp\"\r",
									"            ],\r",
									"            \"title\": \"Welcome10\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"var res = pm.response.json()\r",
									"pm.test(\"JasonSchema Validation\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    pm.expect(res).to.have.property('error');\r",
									"    pm.expect(res).to.have.property('status');\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComment_mod}}\",\r\n  \"userEduPg\": \"{{userEduPg_mod}}\",\r\n  \"userEduUg\": \"{{userEduUg_mod}}\",\r\n  \"userFirstName\": \"{{userFirstName_mod}}\",\r\n  \"userId\": \"{{Userid_mod}}\",\r\n  \"userLastName\": \"{{userLastName_mod}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_mod}}\",\r\n  \"userLocation\": \"{{userLocation_mod}}\",\r\n  \"userLoginEmail\": \"{{userLoginEmail_mod}}\",\r\n  \"userMiddleName\": \"{{userMiddleName_mod}}\",\r\n  \"userPhoneNumber\": {{Ph_ with_Spl_char}},\r\n  \"userTimeZone\": \"{{userTimeZone_mod}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus_mod}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/{{Userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"{{Userid_mod}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User with Invalid TimeZone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"const schema ={\r",
									"   \r",
									"    \"definitions\": {\r",
									"        \"Welcome10\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"timestamp\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"date-time\"\r",
									"                },\r",
									"                \"status\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"path\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"error\",\r",
									"                \"path\",\r",
									"                \"status\",\r",
									"                \"timestamp\"\r",
									"            ],\r",
									"            \"title\": \"Welcome10\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"var res = pm.response.json()\r",
									"pm.test(\"JasonSchema Validation\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    pm.expect(res).to.have.property('message');\r",
									"    pm.expect(res).to.have.property('success');\r",
									"});\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(res.message).to.eql(\"Failed to update user, as 'TimeZone' is invalid !! \");\r",
									"    pm.expect(res.success).to.eql(false);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComment_mod}}\",\r\n  \"userEduPg\": \"{{userEduPg_mod}}\",\r\n  \"userEduUg\": \"{{userEduUg_mod}}\",\r\n  \"userFirstName\": \"{{userFirstName_mod}}\",\r\n  \"userId\": \"{{Userid_mod}}\",\r\n  \"userLastName\": \"{{userLastName_mod}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_mod}}\",\r\n  \"userLocation\": \"{{userLocation_mod}}\",\r\n  \"userLoginEmail\": \"{{userLoginEmail_mod}}\",\r\n  \"userMiddleName\": \"{{userMiddleName_mod}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber_mod}},\r\n  \"userTimeZone\": \"{{Invalid_time_zn}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus_mod}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/{{Userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"{{Userid_mod}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Using Invalid Visa Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"const schema ={\r",
									"   \r",
									"    \"definitions\": {\r",
									"        \"Welcome10\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"timestamp\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"date-time\"\r",
									"                },\r",
									"                \"status\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"path\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"error\",\r",
									"                \"path\",\r",
									"                \"status\",\r",
									"                \"timestamp\"\r",
									"            ],\r",
									"            \"title\": \"Welcome10\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"var res = pm.response.json()\r",
									"pm.test(\"JasonSchema Validation\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    pm.expect(res).to.have.property('message');\r",
									"    pm.expect(res).to.have.property('success');\r",
									"});\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(res.message).to.eql(\"Failed to update user, as 'Visa Status' is invalid !! \");\r",
									"    pm.expect(res.success).to.eql(false);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComment_mod}}\",\r\n  \"userEduPg\": \"{{userEduPg_mod}}\",\r\n  \"userEduUg\": \"{{userEduUg_mod}}\",\r\n  \"userFirstName\": \"{{userFirstName_mod}}\",\r\n  \"userId\": \"{{Userid_mod}}\",\r\n  \"userLastName\": \"{{userLastName_mod}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_mod}}\",\r\n  \"userLocation\": \"{{userLocation_mod}}\",\r\n  \"userLoginEmail\": \"{{userLoginEmail_mod}}\",\r\n  \"userMiddleName\": \"{{userMiddleName_mod}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber_mod}},\r\n  \"userTimeZone\": \"{{userTimeZone_mod}}\",\r\n  \"userVisaStatus\": \"{{Invalid_visa}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/{{Userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"{{Userid_mod}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Using Invalid lastName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"const schema ={\r",
									"   \r",
									"    \"definitions\": {\r",
									"        \"Welcome10\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"timestamp\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"date-time\"\r",
									"                },\r",
									"                \"status\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"path\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"error\",\r",
									"                \"path\",\r",
									"                \"status\",\r",
									"                \"timestamp\"\r",
									"            ],\r",
									"            \"title\": \"Welcome10\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"var res = pm.response.json()\r",
									"pm.test(\"JasonSchema Validation\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    pm.expect(res).to.have.property('message');\r",
									"    pm.expect(res).to.have.property('success');\r",
									"});\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(res.message).to.eql(\"Failed to update user, as LastName' is invalid !! \");\r",
									"    pm.expect(res.success).to.eql(false);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComment_mod}}\",\r\n  \"userEduPg\": \"{{userEduPg_mod}}\",\r\n  \"userEduUg\": \"{{userEduUg_mod}}\",\r\n  \"userFirstName\": \"{{userFirstName_mod}}\",\r\n  \"userId\": \"{{Userid_mod}}\",\r\n  \"userLastName\": \"{{Invalid_Lname}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_mod}}\",\r\n  \"userLocation\": \"{{userLocation_mod}}\",\r\n  \"userLoginEmail\": \"{{userLoginEmail_mod}}\",\r\n  \"userMiddleName\": \"{{userMiddleName_mod}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber_mod}},\r\n  \"userTimeZone\": \"{{userTimeZone_mod}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus_mod}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/{{Userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"{{Userid_mod}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Using Invalid FirststName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"const schema ={\r",
									"   \r",
									"    \"definitions\": {\r",
									"        \"Welcome10\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"timestamp\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"date-time\"\r",
									"                },\r",
									"                \"status\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"path\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"error\",\r",
									"                \"path\",\r",
									"                \"status\",\r",
									"                \"timestamp\"\r",
									"            ],\r",
									"            \"title\": \"Welcome10\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"var res = pm.response.json()\r",
									"pm.test(\"JasonSchema Validation\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    pm.expect(res).to.have.property('message');\r",
									"    pm.expect(res).to.have.property('success');\r",
									"});\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(res.message).to.eql(\"Failed to update user, as LastName' is invalid !! \");\r",
									"    pm.expect(res.success).to.eql(false);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComment_mod}}\",\r\n  \"userEduPg\": \"{{userEduPg_mod}}\",\r\n  \"userEduUg\": \"{{userEduUg_mod}}\",\r\n  \"userFirstName\": \"{{Invalid_Fname}}\",\r\n  \"userId\": \"{{Userid_mod}}\",\r\n  \"userLastName\": \"{{userLastName_mod}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_mod}}\",\r\n  \"userLocation\": \"{{userLocation_mod}}\",\r\n  \"userLoginEmail\": \"{{userLoginEmail_mod}}\",\r\n  \"userMiddleName\": \"{{userMiddleName_mod}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber_mod}},\r\n  \"userTimeZone\": \"{{userTimeZone_mod}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus_mod}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/{{Userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"{{Userid_mod}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Role Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"roleId\": \"{{roleId_mod}}\",\r\n  \"userRoleStatus\": \"{{userRoleStatus_mod}}\"\r\n}\r\n\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus/{{Userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus",
								"{{Userid_mod}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Role Status Using Invalid Userid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"    pm.expect(pm.response.status).contain(\"Not Found\");\r",
									"});\r",
									"const schema ={\r",
									"   \r",
									"    \"definitions\": {\r",
									"        \"Welcome10\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"timestamp\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"date-time\"\r",
									"                },\r",
									"                \"status\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"path\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"error\",\r",
									"                \"path\",\r",
									"                \"status\",\r",
									"                \"timestamp\"\r",
									"            ],\r",
									"            \"title\": \"Welcome10\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"var res = pm.response.json()\r",
									"pm.test(\"JasonSchema Validation\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    pm.expect(res).to.have.property('message');\r",
									"    pm.expect(res).to.have.property('success');\r",
									"});\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(res.message).contain(\"Not Found\");\r",
									"    pm.expect(res.success).to.eql(false);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"roleId\": \"{{roleId_mod}}\",\r\n  \"userRoleStatus\": \"{{userRoleStatus_mod}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus/U52000",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus",
								"U52000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Role With Invalid Role Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"const schema ={\r",
									"   \r",
									"    \"definitions\": {\r",
									"        \"Welcome10\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"timestamp\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"date-time\"\r",
									"                },\r",
									"                \"status\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"path\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"error\",\r",
									"                \"path\",\r",
									"                \"status\",\r",
									"                \"timestamp\"\r",
									"            ],\r",
									"            \"title\": \"Welcome10\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"var res = pm.response.json()\r",
									"pm.test(\"JasonSchema Validation\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    pm.expect(res).to.have.property('message');\r",
									"    pm.expect(res).to.have.property('success');\r",
									"});\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(res.message).to.eql(\"Invalid Status: must be Active or Inactive\");\r",
									"    pm.expect(res.success).to.eql(false);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"roleId\": \"{{roleId_mod}}\",\r\n  \"userRoleStatus\": \"{{Invalid_RoleStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus/{{Userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus",
								"{{Userid_mod}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Role Status Using RoleId Mismatch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"    pm.expect(pm.response.status).contain(\"Not Found\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"roleId\": \"{{RoleId_Mismatch}}\",\r\n  \"userRoleStatus\": \"{{userRoleStatus_mod}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleStatus/{{Userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleStatus",
								"{{Userid_mod}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User RoleId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userRoleList\": [\r\n    \"{{Update_roleId}}\"\r\n    ]\r\n}\r\n\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleId/{{Userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleId",
								"{{Userid_mod}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User RoleId Using Invalid UserId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"    pm.expect(pm.response.status).contain(\"Not Found\");\r",
									"});\r",
									"const schema ={\r",
									"   \r",
									"    \"definitions\": {\r",
									"        \"Welcome10\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"timestamp\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"date-time\"\r",
									"                },\r",
									"                \"status\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"path\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"error\",\r",
									"                \"path\",\r",
									"                \"status\",\r",
									"                \"timestamp\"\r",
									"            ],\r",
									"            \"title\": \"Welcome10\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"var res = pm.response.json()\r",
									"pm.test(\"JasonSchema Validation\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    pm.expect(res).to.have.property('message');\r",
									"    pm.expect(res).to.have.property('success');\r",
									"});\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(res.message).contain(\"Not Found\");\r",
									"    pm.expect(res.success).to.eql(false);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userRoleList\": [\r\n    \"{{roleId_mod}}\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleId/U84500",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleId",
								"U84500"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User RoleId Using Invalid roleId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"const schema ={\r",
									"   \r",
									"    \"definitions\": {\r",
									"        \"Welcome10\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"timestamp\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"date-time\"\r",
									"                },\r",
									"                \"status\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"path\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"error\",\r",
									"                \"path\",\r",
									"                \"status\",\r",
									"                \"timestamp\"\r",
									"            ],\r",
									"            \"title\": \"Welcome10\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"var res = pm.response.json()\r",
									"pm.test(\"JasonSchema Validation\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    pm.expect(res).to.have.property('message');\r",
									"    pm.expect(res).to.have.property('success');\r",
									"});\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(res.message).contain(\"Invalid role id\");\r",
									"    pm.expect(res.success).to.eql(false);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userRoleList\": [\r\n    \"{{Invalid_Roleid}}\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleId/{{Userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleId",
								"{{Userid_mod}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User RoleId Using Same roleId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"const schema ={\r",
									"   \r",
									"    \"definitions\": {\r",
									"        \"Welcome10\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"timestamp\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"date-time\"\r",
									"                },\r",
									"                \"status\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"path\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"error\",\r",
									"                \"path\",\r",
									"                \"status\",\r",
									"                \"timestamp\"\r",
									"            ],\r",
									"            \"title\": \"Welcome10\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"var res = pm.response.json()\r",
									"pm.test(\"JasonSchema Validation\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    pm.expect(res).to.have.property('message');\r",
									"    pm.expect(res).to.have.property('success');\r",
									"});\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(res.message).contain(\"already exists for user\");\r",
									"    pm.expect(res.success).to.eql(false);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userRoleList\": [\r\n    \"{{Update_roleId}}\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleId/{{Userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleId",
								"{{Userid_mod}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User RoleId Using Missing roleId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"const schema ={\r",
									"   \r",
									"    \"definitions\": {\r",
									"        \"Welcome10\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"timestamp\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"date-time\"\r",
									"                },\r",
									"                \"status\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"path\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"error\",\r",
									"                \"path\",\r",
									"                \"status\",\r",
									"                \"timestamp\"\r",
									"            ],\r",
									"            \"title\": \"Welcome10\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"var res = pm.response.json()\r",
									"pm.test(\"JasonSchema Validation\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    pm.expect(res).to.have.property('message');\r",
									"    pm.expect(res).to.have.property('success');\r",
									"});\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(res.message).contain(\"User Role Info is mandatory\");\r",
									"    pm.expect(res.success).to.eql(false);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userRoleList\": [\r\n    \r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleId/{{Userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleId",
								"{{Userid_mod}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign update user role program batch status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"    pm.expect(pm.response.status).contain(\"OK\");\r",
									"});\r",
									"const schema ={\r",
									"   \r",
									"    \"definitions\": {\r",
									"        \"Welcome10\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"timestamp\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"date-time\"\r",
									"                },\r",
									"                \"status\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"path\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"error\",\r",
									"                \"path\",\r",
									"                \"status\",\r",
									"                \"timestamp\"\r",
									"            ],\r",
									"            \"title\": \"Welcome10\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"var res = pm.response.json()\r",
									"pm.test(\"JasonSchema Validation\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    pm.expect(res).to.have.property('message');\r",
									"    pm.expect(res).to.have.property('success');\r",
									"});\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(res.message).contain(\"has been successfully assigned\");\r",
									"    pm.expect(res.success).to.eql(true);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programId\": {{programId_env}},\r\n  \"roleId\": \"{{Update_roleId}}\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": {{batchId_env}},\r\n      \"userRoleProgramBatchStatus\": \"Active\"\r\n    }\r\n  ]\r\n}\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleProgramBatchStatus/{{Userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleProgramBatchStatus",
								"{{Userid_mod}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign update user role program batch status Using Invalid UserId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"    pm.expect(pm.response.status).contain(\"Not Found\");\r",
									"});\r",
									"const schema ={\r",
									"   \r",
									"    \"definitions\": {\r",
									"        \"Welcome10\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"timestamp\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"date-time\"\r",
									"                },\r",
									"                \"status\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"path\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"error\",\r",
									"                \"path\",\r",
									"                \"status\",\r",
									"                \"timestamp\"\r",
									"            ],\r",
									"            \"title\": \"Welcome10\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"var res = pm.response.json()\r",
									"pm.test(\"JasonSchema Validation\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    pm.expect(res).to.have.property('message');\r",
									"    pm.expect(res).to.have.property('success');\r",
									"});\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(res.message).contain(\"User not found\");\r",
									"    pm.expect(res.success).to.eql(false);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programId\": {{programId_env}},\r\n  \"roleId\": \"{{Update_roleId}}\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": {{batchId_env}},\r\n      \"userRoleProgramBatchStatus\": \"Active\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleProgramBatchStatus/U845000",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleProgramBatchStatus",
								"U845000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign update User role program batch status Using Missing ProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"const schema ={\r",
									"   \r",
									"    \"definitions\": {\r",
									"        \"Welcome10\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"timestamp\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"date-time\"\r",
									"                },\r",
									"                \"status\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"path\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"error\",\r",
									"                \"path\",\r",
									"                \"status\",\r",
									"                \"timestamp\"\r",
									"            ],\r",
									"            \"title\": \"Welcome10\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"var res = pm.response.json()\r",
									"pm.test(\"JasonSchema Validation\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    pm.expect(res).to.have.property('message');\r",
									"    pm.expect(res).to.have.property('success');\r",
									"});\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(res.message).contain(\"Program Id is mandatory\");\r",
									"    pm.expect(res.success).to.eql(false);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"roleId\": \"{{Update_roleId}}\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": {{batchId_env}},\r\n      \"userRoleProgramBatchStatus\": \"Active\"\r\n    }\r\n  ]\r\n}\r\n\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleProgramBatchStatus/{{Userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleProgramBatchStatus",
								"{{Userid_mod}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign update User role program batch status Using Missing RoleId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"const schema ={\r",
									"   \r",
									"    \"definitions\": {\r",
									"        \"Welcome10\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"timestamp\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"date-time\"\r",
									"                },\r",
									"                \"status\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"path\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"error\",\r",
									"                \"path\",\r",
									"                \"status\",\r",
									"                \"timestamp\"\r",
									"            ],\r",
									"            \"title\": \"Welcome10\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"var res = pm.response.json()\r",
									"pm.test(\"JasonSchema Validation\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    pm.expect(res).to.have.property('message');\r",
									"    pm.expect(res).to.have.property('success');\r",
									"});\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(res.message).contain(\"Role Id is mandatory\");\r",
									"    pm.expect(res.success).to.eql(false);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programId\": {{programId_env}},\r\n   \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": {{batchId_env}},\r\n      \"userRoleProgramBatchStatus\": \"Active\"\r\n    }\r\n  ]\r\n}\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleProgramBatchStatus/{{Userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleProgramBatchStatus",
								"{{Userid_mod}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign update User role program batch status Using Invalid BatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"const schema ={\r",
									"   \r",
									"    \"definitions\": {\r",
									"        \"Welcome10\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"timestamp\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"date-time\"\r",
									"                },\r",
									"                \"status\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"path\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"error\",\r",
									"                \"path\",\r",
									"                \"status\",\r",
									"                \"timestamp\"\r",
									"            ],\r",
									"            \"title\": \"Welcome10\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"var res = pm.response.json()\r",
									"pm.test(\"JasonSchema Validation\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    pm.expect(res).to.have.property('message');\r",
									"    pm.expect(res).to.have.property('success');\r",
									"});\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(res.message).contain(\"not found with Status as Active for Program\");\r",
									"    pm.expect(res.success).to.eql(false);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programId\": {{programId_env}},\r\n  \"roleId\": \"{{Update_roleId}}\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": {{Invalid_Batchid}},\r\n      \"userRoleProgramBatchStatus\": \"Active\"\r\n    }\r\n  ]\r\n}\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleProgramBatchStatus/{{Userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleProgramBatchStatus",
								"{{Userid_mod}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign update User role program batch status Using Inactive Batch Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"    pm.expect(pm.response.status).contain(\"Not Found\");\r",
									"});\r",
									"const schema ={\r",
									"   \r",
									"    \"definitions\": {\r",
									"        \"Welcome10\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"timestamp\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"date-time\"\r",
									"                },\r",
									"                \"status\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"path\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"error\",\r",
									"                \"path\",\r",
									"                \"status\",\r",
									"                \"timestamp\"\r",
									"            ],\r",
									"            \"title\": \"Welcome10\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"var res = pm.response.json()\r",
									"pm.test(\"JasonSchema Validation\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    pm.expect(res).to.have.property('message');\r",
									"    pm.expect(res).to.have.property('success');\r",
									"});\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    \r",
									"    pm.expect(res.success).to.eql(false);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programId\": {{programId_env}},\r\n  \"roleId\": \"{{Update_roleId}}\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": {{batchId_env}},\r\n      \"userRoleProgramBatchStatus\": \"Inactive\"\r\n    }\r\n  ]\r\n}\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleProgramBatchStatus/{{userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleProgramBatchStatus",
								"{{userid_mod}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign update User role program batch status Using Programid Batchid mismatch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"const schema ={\r",
									"   \r",
									"    \"definitions\": {\r",
									"        \"Welcome10\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"timestamp\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"date-time\"\r",
									"                },\r",
									"                \"status\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"path\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"error\",\r",
									"                \"path\",\r",
									"                \"status\",\r",
									"                \"timestamp\"\r",
									"            ],\r",
									"            \"title\": \"Welcome10\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"var res = pm.response.json()\r",
									"pm.test(\"JasonSchema Validation\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    pm.expect(res).to.have.property('message');\r",
									"    pm.expect(res).to.have.property('success');\r",
									"});\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(res.message).contain(\"not found with Status as Active for Program\");\r",
									"    pm.expect(res.success).to.eql(false);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programId\": {{programId_env}},\r\n  \"roleId\": \"{{Update_roleId}}\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": {{batchid_mismatch}},\r\n      \"userRoleProgramBatchStatus\": \"Active\"\r\n    }\r\n  ]\r\n}\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleProgramBatchStatus/{{Userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleProgramBatchStatus",
								"{{Userid_mod}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign update User role program batch status Using RoleId UserId Mismatch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"const schema ={\r",
									"   \r",
									"    \"definitions\": {\r",
									"        \"Welcome10\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"timestamp\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"date-time\"\r",
									"                },\r",
									"                \"status\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"path\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"error\",\r",
									"                \"path\",\r",
									"                \"status\",\r",
									"                \"timestamp\"\r",
									"            ],\r",
									"            \"title\": \"Welcome10\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"var res = pm.response.json()\r",
									"pm.test(\"JasonSchema Validation\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    pm.expect(res).to.have.property('message');\r",
									"    pm.expect(res).to.have.property('success');\r",
									"});\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(res.message).contain(\"cannot be assigned\");\r",
									"    pm.expect(res.success).to.eql(false);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programId\": {{programId_env}},\r\n  \"roleId\": \"{{roleId_mod}}\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": {{batchId_env}},\r\n      \"userRoleProgramBatchStatus\": \"Active\"\r\n    }\r\n  ]\r\n}\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleProgramBatchStatus/{{Userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleProgramBatchStatus",
								"{{Userid_mod}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign update User role program batch status Using Already Assigned program",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"const schema ={\r",
									"   \r",
									"    \"definitions\": {\r",
									"        \"Welcome10\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"timestamp\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"date-time\"\r",
									"                },\r",
									"                \"status\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"path\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"error\",\r",
									"                \"path\",\r",
									"                \"status\",\r",
									"                \"timestamp\"\r",
									"            ],\r",
									"            \"title\": \"Welcome10\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"var res = pm.response.json()\r",
									"pm.test(\"JasonSchema Validation\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    pm.expect(res).to.have.property('message');\r",
									"    pm.expect(res).to.have.property('success');\r",
									"});\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(res.message).contain(\"Please deactivate User from existing program/batch and then activate for another program/batch\");\r",
									"    pm.expect(res.success).to.eql(false);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programId\": {{programId_env}},\r\n  \"roleId\": \"{{Update_roleId}}\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": {{batchId_env}},\r\n      \"userRoleProgramBatchStatus\": \"Active\"\r\n    }\r\n  ]\r\n}\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/roleProgramBatchStatus/{{Userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"roleProgramBatchStatus",
								"{{Userid_mod}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Login Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"    pm.expect(pm.response.status).contain(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"loginStatus\": \"Active\",\r\n  \"password\": \"zcdg1245\",\r\n  \"roleIds\": [\r\n    \"R02\"\r\n  ],\r\n  \"status\": \"Active\",\r\n  \"userLoginEmail\":  \"{{userLoginEmail_mod}}\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/userLogin/{{Userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"userLogin",
								"{{Userid_mod}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Login Status Using Invalid UserId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"    pm.expect(pm.response.status).contain(\"Not Found\");\r",
									"});\r",
									"const schema ={\r",
									"   \r",
									"    \"definitions\": {\r",
									"        \"Welcome10\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"timestamp\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"date-time\"\r",
									"                },\r",
									"                \"status\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"path\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"error\",\r",
									"                \"path\",\r",
									"                \"status\",\r",
									"                \"timestamp\"\r",
									"            ],\r",
									"            \"title\": \"Welcome10\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"var res = pm.response.json()\r",
									"pm.test(\"JasonSchema Validation\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    pm.expect(res).to.have.property('message');\r",
									"    pm.expect(res).to.have.property('success');\r",
									"});\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(res.message).contain(\"Not Found\");\r",
									"    pm.expect(res.success).to.eql(false);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"loginStatus\": \"Active\",\r\n  \"password\": \"zcdg1245\",\r\n  \"roleIds\": [\r\n    \"R02\"\r\n  ],\r\n  \"status\": \"Active\",\r\n  \"userLoginEmail\": \"{{userLoginEmail_mod}}\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/userLogin/U27000",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"userLogin",
								"U27000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Login Status With Login Status Missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"loginStatus\": \"\",\r\n  \"password\": \"zcdg1245\",\r\n  \"roleIds\": [\r\n    \"R02\"\r\n  ],\r\n  \"status\": \"Active\",\r\n  \"userLoginEmail\": \"{{userLoginEmail_mod}}\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/userLogin/{{Userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"userLogin",
								"{{Userid_mod}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Login Status With Password Missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"loginStatus\": \"Active\",\r\n  \"password\": \"\",\r\n  \"roleIds\": [\r\n    \"R02\"\r\n  ],\r\n  \"status\": \"Active\",\r\n  \"userLoginEmail\": \"{{userLoginEmail_mod}}\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/userLogin/{{Userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"userLogin",
								"{{Userid_mod}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Login Status With Wrong RoleId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"loginStatus\": \"Active\",\r\n  \"password\": \"zcdg1245\",\r\n  \"roleIds\": [\r\n    \"R04\"\r\n  ],\r\n  \"status\": \"Active\",\r\n  \"userLoginEmail\": \"{{userLoginEmail_mod}}\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/userLogin/{{Userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"userLogin",
								"{{Userid_mod}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Login Status With Staus Missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"loginStatus\": \"Active\",\r\n  \"password\": \"zcdg1245\",\r\n  \"roleIds\": [\r\n    \"R03\"\r\n  ],\r\n    \"userLoginEmail\": \"{{userLoginEmail_mod}}\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/userLogin/{{Userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"userLogin",
								"{{Userid_mod}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Login Status With Staus Missing UserLoginEmail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"const schema ={\r",
									"   \r",
									"    \"definitions\": {\r",
									"        \"Welcome10\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"timestamp\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"date-time\"\r",
									"                },\r",
									"                \"status\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"path\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"error\",\r",
									"                \"path\",\r",
									"                \"status\",\r",
									"                \"timestamp\"\r",
									"            ],\r",
									"            \"title\": \"Welcome10\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"var res = pm.response.json()\r",
									"pm.test(\"JasonSchema Validation\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    pm.expect(res).to.have.property('message');\r",
									"    pm.expect(res).to.have.property('success');\r",
									"});\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(res.message).contain(\"UserLoginEmail is mandatory\");\r",
									"    pm.expect(res.success).to.eql(false);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"loginStatus\": \"Active\",\r\n  \"password\": \"zcdg1245\",\r\n  \"roleIds\": [\r\n    \"R03\"\r\n  ],\r\n    \"status\": \"Active\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/userLogin/{{Userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"userLogin",
								"{{Userid_mod}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Login Status With Staus Missing RoleId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.status).contain(\"Bad Request\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"loginStatus\": \"Active\",\r\n  \"password\": \"zcdg1245\",\r\n  \"roleIds\": [\r\n    \r\n  ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"{{userLoginEmail_mod}}\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/userLogin/{{Userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"userLogin",
								"{{Userid_mod}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User Using Invaid UserId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"    pm.expect(pm.response.status).contain(\"Not Found\");\r",
									"    });\r",
									"const schema ={\r",
									"   \r",
									"    \"definitions\": {\r",
									"        \"Welcome10\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"timestamp\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"date-time\"\r",
									"                },\r",
									"                \"status\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"path\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"error\",\r",
									"                \"path\",\r",
									"                \"status\",\r",
									"                \"timestamp\"\r",
									"            ],\r",
									"            \"title\": \"Welcome10\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"var res = pm.response.json()\r",
									"pm.test(\"JasonSchema Validation\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    pm.expect(res).to.have.property('message');\r",
									"    pm.expect(res).to.have.property('success');\r",
									"});\r",
									"pm.test(\"Message Validation\", function(){\r",
									"    pm.expect(res.message).contain(\"does not exist\");\r",
									"    pm.expect(res.success).to.eql(false);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Transfer Encoding Validation\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/U28000",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"U28000"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Team21_API_Validators_ UserRoleProgramBatchMapController",
			"item": [
				{
					"name": "positive",
					"item": [
						{
							"name": "AllUsers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//bodyData = JSON.parse(responseBody)\r",
											"//value = bodyData.jsonpathofthatvalue\r",
											"//console.log(value)\r",
											"//pm.collectionVariables.set(\"Userid\",value);    OR\r",
											"\r",
											"//var jsonData = JSON.parse(responseBody);\r",
											"//pm.collectionVariables.set(\"Userid\",jsonData.Userid);\r",
											"\r",
											"//var schema =\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", ()=>{\r",
											"pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"\r",
											"const expectedJSONSchema = \r",
											"{\r",
											"  \r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"userId\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"roleId\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"programId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"batchId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"userRoleProgramBatchStatus\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"userId\",\r",
											"        \"roleId\",\r",
											"        \"programId\",\r",
											"        \"batchId\",\r",
											"        \"userRoleProgramBatchStatus\"\r",
											"      ]\r",
											"    },\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"userId\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"roleId\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"programId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"batchId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"userRoleProgramBatchStatus\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"userId\",\r",
											"        \"roleId\",\r",
											"        \"programId\",\r",
											"        \"batchId\",\r",
											"        \"userRoleProgramBatchStatus\"\r",
											"      ]\r",
											"    },\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"userId\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"roleId\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"programId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"batchId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"userRoleProgramBatchStatus\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"userId\",\r",
											"        \"roleId\",\r",
											"        \"programId\",\r",
											"        \"batchId\",\r",
											"        \"userRoleProgramBatchStatus\"\r",
											"      ]\r",
											"    },\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"userId\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"roleId\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"programId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"batchId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"userRoleProgramBatchStatus\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"userId\",\r",
											"        \"roleId\",\r",
											"        \"programId\",\r",
											"        \"batchId\",\r",
											"        \"userRoleProgramBatchStatus\"\r",
											"      ]\r",
											"    },\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"userId\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"roleId\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"programId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"batchId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"userRoleProgramBatchStatus\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"userId\",\r",
											"        \"roleId\",\r",
											"        \"programId\",\r",
											"        \"batchId\",\r",
											"        \"userRoleProgramBatchStatus\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test(\"Verify JSON Schema\", function(){\r",
											"pm.response.to.have.jsonSchema(expectedJSONSchema)\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"/*pm.test(\"Verify JSON Schema\", function(){\r",
											"\r",
											"var result=tv4.validateResult(pm.response.json),schema);\r",
											"\r",
											"if !result.valid ){\r",
											"console.log(result);\r",
											"\r",
											"}\r",
											"pm.expect(result.valid).to.be.true;\r",
											"})\r",
											"\r",
											"    */"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/userRoleProgramBatchMap",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"userRoleProgramBatchMap"
									]
								},
								"description": "This API will allow you to get all users"
							},
							"response": []
						},
						{
							"name": "ByUserId(Assigned program/batch)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", ()=>{\r",
											"pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"const expectedJSONSchema = \r",
											"{\r",
											"  \r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"userId\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"roleId\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"programId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"batchId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"userRoleProgramBatchStatus\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"userId\",\r",
											"        \"roleId\",\r",
											"        \"programId\",\r",
											"        \"batchId\",\r",
											"        \"userRoleProgramBatchStatus\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test(\"Verify JSON Schema\", function(){\r",
											"pm.response.to.have.jsonSchema(expectedJSONSchema)\r",
											"\r",
											"}\r",
											");\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/userRoleProgramBatchMap/{{Userid_mod}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"userRoleProgramBatchMap",
										"{{Userid_mod}}"
									]
								},
								"description": "This API will allow you to get Assigned program/batch(es) of user by Userid"
							},
							"response": []
						}
					]
				},
				{
					"name": "negative",
					"item": [
						{
							"name": "AllUsersWithoutEndpt",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line should contain Not Found\", function () {\r",
											"    pm.response.to.have.status('Not Found');\r",
											"});\r",
											"\r",
											"\r",
											"const expectedJSONSchema = \r",
											"{\r",
											"  \r",
											"\r",
											"  \r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test(\"Verify JSON Schema\", function(){\r",
											"pm.response.to.have.jsonSchema(expectedJSONSchema)\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}",
									"host": [
										"{{BaseUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "AllUsersInvalidEndPt",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line should contain Not Found\", function () {\r",
											"    pm.response.to.have.status('Not Found');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}abcdefg",
									"host": [
										"{{BaseUrl}}abcdefg"
									]
								}
							},
							"response": []
						},
						{
							"name": "ByUserIdInvalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line should contain Not Found\", function () {\r",
											"    pm.response.to.have.status('Not Found');\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", ()=>{\r",
											"pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"const expectedJSONSchema = \r",
											"{\r",
											"  \r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test(\"Verify JSON Schema\", function(){\r",
											"pm.response.to.have.jsonSchema(expectedJSONSchema)\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/userRoleProgramBatchMap/Z1234",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"userRoleProgramBatchMap",
										"Z1234"
									]
								}
							},
							"response": []
						},
						{
							"name": "ByUserIdWithoutEndPt",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line should contain Not Found\", function () {\r",
											"    pm.response.to.have.status('Not Found');\r",
											"});\r",
											"\r",
											"const expectedJSONSchema = \r",
											"{\r",
											"  \r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test(\"Verify JSON Schema\", function(){\r",
											"pm.response.to.have.jsonSchema(expectedJSONSchema)\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}",
									"host": [
										"{{BaseUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ByUserIdSpecialChar",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line should contain Not Found\", function () {\r",
											"    pm.response.to.have.status('Not Found');\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", ()=>{\r",
											"pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"const expectedJSONSchema = \r",
											"{\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verify JSON Schema\", function(){\r",
											"pm.response.to.have.jsonSchema(expectedJSONSchema)\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/userRoleProgramBatchMap/!@#$%",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"userRoleProgramBatchMap",
										"!@"
									],
									"hash": "$%"
								}
							},
							"response": []
						},
						{
							"name": "ByUserIdModifiedEndpt",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line should contain Not Found\", function () {\r",
											"    pm.response.to.have.status('Not Found');\r",
											"});\r",
											"\r",
											"const expectedJSONSchema = \r",
											"{\r",
											"  \r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test(\"Verify JSON Schema\", function(){\r",
											"pm.response.to.have.jsonSchema(expectedJSONSchema)\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/userRoleProgramBatchMap123/A20",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"userRoleProgramBatchMap123",
										"A20"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Team21_API_Validators_Delete And logout",
			"item": [
				{
					"name": "Delete Program by Program Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check the Status Code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Check the Status Code Text\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//Check the response header is present\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"//Check the Content-Type response header is application/json\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain;charset=UTF-8');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/deletebyprogid/{{programId_cl}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"deletebyprogid",
								"{{programId_cl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Program by Program Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check the Status Code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Check the Status Code Text\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//Check the response header is present\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"//Check the Content-Type response header is application/json\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain;charset=UTF-8');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/deletebyprogname/{{programName_cl}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"deletebyprogname",
								"{{programName_cl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete batch by  Valid BatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Status String is OK', () => {",
									"pm.response.to.have.status(\"OK\");})",
									"",
									"pm.test('Response time is less than 1000ms',() =>{",
									"pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/batches/{{batchId_cl}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"batches",
								"{{batchId_cl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ByUserId(Assigned program/batches)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/userRoleProgramBatchMap/deleteAll/{{Userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"userRoleProgramBatchMap",
								"deleteAll",
								"{{Userid_mod}}"
							]
						},
						"description": "By using this API you can delete Assigned program/batch(es) by using Userid"
					},
					"response": []
				},
				{
					"name": "ByUserId(Assigned program/batches) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line should contain Not Found\", function () {\r",
									"    pm.response.to.have.status('Not Found');\r",
									"});\r",
									"const expectedJSONSchema = \r",
									"{\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Verify JSON Schema\", function(){\r",
									"pm.response.to.have.jsonSchema(expectedJSONSchema)\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/userRoleProgramBatchMap/deleteAll/A2039",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"userRoleProgramBatchMap",
								"deleteAll",
								"A2039"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/{{Userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"{{Userid_mod}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User Using Already Deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"    pm.expect(pm.response.status).contain(\"Not Found\");\r",
									"    });\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									" pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/users/{{Userid_mod}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"users",
								"{{Userid_mod}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Log Out with token Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Status Line Validation\r",
									"pm.test(\"Status line should contain 'OK'\", function () {\r",
									"    pm.response.to.have.status('OK');\r",
									"});\r",
									"\r",
									"// Status Code Validation\r",
									"pm.test(\"Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Response Time Validation\r",
									"pm.test(\"Response time should be less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									" //Data Type Validation (Example: JSON)\r",
									"pm.test(\"Content-Type header is text/plain;charset=UTF-8\", ()=>{\r",
									"pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"    key: 'Content-Type',\r",
									"    value: 'text/plain;charset=UTF-8'\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}{{logoutEndpoint}}",
							"host": [
								"{{BaseUrl}}{{logoutEndpoint}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{Token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "programName_cl",
			"value": ""
		},
		{
			"key": "programId_cl",
			"value": ""
		},
		{
			"key": "CurrentMonthDate_cl",
			"value": ""
		},
		{
			"key": "serialNo_cl",
			"value": ""
		},
		{
			"key": "batchId_cl",
			"value": ""
		},
		{
			"key": "batchName_cl",
			"value": ""
		},
		{
			"key": "batchStatus_cl",
			"value": ""
		},
		{
			"key": "roleId_mod",
			"value": ""
		},
		{
			"key": "userRoleStatus_mod",
			"value": ""
		},
		{
			"key": "userPhoneNumber",
			"value": ""
		},
		{
			"key": "userLoginEmail",
			"value": ""
		},
		{
			"key": "Userid_mod",
			"value": ""
		},
		{
			"key": "userComment_mod",
			"value": ""
		},
		{
			"key": "userEduPg_mod",
			"value": ""
		},
		{
			"key": "userEduUg_mod",
			"value": ""
		},
		{
			"key": "userFirstName_mod",
			"value": ""
		},
		{
			"key": "userLastName_mod",
			"value": ""
		},
		{
			"key": "userLinkedinUrl_mod",
			"value": ""
		},
		{
			"key": "userLocation_mod",
			"value": ""
		},
		{
			"key": "userLoginEmail_mod",
			"value": ""
		},
		{
			"key": "userMiddleName_mod",
			"value": ""
		},
		{
			"key": "userPhoneNumber_mod",
			"value": ""
		},
		{
			"key": "userTimeZone_mod",
			"value": ""
		},
		{
			"key": "userVisaStatus_mod",
			"value": ""
		},
		{
			"key": "UpdatedUserPhoneNumber",
			"value": ""
		},
		{
			"key": "UpdatedUserLoginEmail",
			"value": ""
		},
		{
			"key": "UpdatedUserPhoneNumbergreater",
			"value": ""
		},
		{
			"key": "UpdatedUserLoginEmailgreater",
			"value": ""
		},
		{
			"key": "UpdatedUserPhoneNumberlesser",
			"value": ""
		},
		{
			"key": "UpdatedUserLoginEmaillesser",
			"value": ""
		},
		{
			"key": "UpdatedUserPhoneNumbermail",
			"value": ""
		},
		{
			"key": "Token",
			"value": ""
		},
		{
			"key": "TeamName_cl",
			"value": "APIValidators",
			"type": "string"
		}
	]
}